@using Blazored.Toast.Configuration
@using EventsManager.Shared.Responses
@using Color = Blazorise.Color

@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject HttpClient Http
@using EventsManager.Client.Components

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <article class="content">
            <Alert Style="font-size: 12px; max-width: 800px; padding: 5px; margin: 5px; margin-bottom: 15px" Color="Color.Info" Visible>
                <AlertMessage>Service stop</AlertMessage>
                <AlertDescription>We want to inform you that on Tuesday, 14th of November, our service will be temporarily unavailable starting at 3:00 PM. 
                    This pause in service is due to a migration work and is expected to last approximately 2 hours. 
                    We apologize for any inconvenience this may cause and appreciate your understanding.</AlertDescription>
            </Alert>
            <ErrorBoundary>
                <ChildContent>
                    @Body
                </ChildContent>
                <ErrorContent>
                    <Alert Color="Color.Danger" Visible>
                        <AlertMessage>Error</AlertMessage>
                        <AlertDescription>Something went wrong. Please try again later.</AlertDescription>
                        <Button Color="Color.Primary" Clicked="GoToMainPage">Go to main page</Button>
                    </Alert>
                </ErrorContent>
            </ErrorBoundary>
        </article>
    </main>
</div>

<AuthorizeView>
    <Authorized>
        @if (_initialLevelResponse is {Done: false })
        {
            <InitialLevelForm IsDone="@_initialLevelResponse.Done"></InitialLevelForm>
        }
    </Authorized>
</AuthorizeView>

<BlazoredToasts MaxToastCount="2" Timeout="4" ShowCloseButton="false" ShowProgressBar="true" Position="ToastPosition.TopCenter" RemoveToastsOnNavigation="true" />

@code
{
    private InitialLevelIsDoneResponse? _initialLevelResponse;
    
    private async Task GoToMainPage()
    {
        NavigationManager.NavigateTo("/", forceLoad: true);
    }
    
    protected override async Task OnInitializedAsync()
    {
        await GetInitialLevelInfo();    
    }
    
    private async Task GetInitialLevelInfo()    
    {
        try
        {
            var response = await Http.GetAsync("Announcement/initial-level-done");

            if (response.IsSuccessStatusCode)
            {
                _initialLevelResponse = await response.Content.ReadFromJsonAsync<InitialLevelIsDoneResponse>();
            }
        }
        catch (Exception)
        {
            // ignored
        }
    }
}
