@page "/match/{MatchId:guid}/detail"

@using EventsManager.Shared.Responses
@using EventsManager.Client.Components.Modals
@using EventsManager.Client.Components.Match
@using EventsManager.Client.Components.Match.Results
@using EventsManager.Client.Services
@using EventsManager.Shared.Requests
@using Microsoft.AspNetCore.SignalR.Client
@using Color = Blazorise.Color

@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ClipboardService ClipboardService
@implements IAsyncDisposable

@if (_loading)
{
    <MatchDetailSkeleton></MatchDetailSkeleton>
}
@if (_match != null)
{
    <div class="border-match-detail info">
        <div class="header">
            <div>
                PADEL
            </div>
            <div style="font-size: 12px">
                @_match.StartDateTime.ToLongDateString() / @_match.StartDateTime.ToShortTimeString()
            </div>
        </div>
        <div class="action-buttons top-right">
            @if (_match.RequesterIsTheCreator )
            {
                @if (!_match.Finished)
                {
                    <Buttons Size="Size.Small">
                        <Button @onclick="ShowEditModal" Color="Color.Primary" Outline >Edit</Button>
                        <Button @onclick="ShowRemoveModal" Color="Color.Danger" Outline >Delete</Button>
                    </Buttons>
                }
            }
        </div>
        <Divider />
        <div class="info-footer">
            <div class="info-footer-box">
                <div class="info-footer-box-content">
                    Gender
                </div>
                <div class="info-footer-box-content grey-typo">
                    Not set
                </div>
            </div>
            <div class="info-footer-box">
                <div class="info-footer-box-content">
                    Level
                </div>
                <div class="info-footer-box-content grey-typo">
                    All
                </div>
            </div>
            <div class="info-footer-box">
                <div class="info-footer-box-content">
                    Duration
                </div>
                <div class="info-footer-box-content grey-typo">
                    @_match.Duration @_hourWord
                </div>
            </div>
            <div class="info-footer-box">
                <div class="info-footer-box-content">
                    Price
                </div>
                <div class="info-footer-box-content grey-typo">
                    @if(_matchPrice == 0)
                    {
                        <p>-</p>
                    }
                    else
                    {
                        <p>@_matchPrice â‚¬</p>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="match-detail-private">
        @if (_match.IsPrivate)
        {
            <div class="status">
                <i class="bi bi-lock"></i> <p> Private</p>
            </div>
        }
        else
        {
            <div class="status">
                <i class="bi bi-unlock"></i> <p style="font-size: 12px"> Public</p>
            </div>
        }
        <div class="creator">
            <p style="font-size: 12px">Created By: @_match.CreatorNickName</p>
        </div>
        <div class="share">
            <Icon Name="IconName.Share" Clicked="Share"></Icon>
        </div>
    </div>
    
    <MatchDetailPlayers ReturnUrl="@MatchPath" RefreshMatch="GetMatch" Match="_match"></MatchDetailPlayers>
    
    @if (_match.PlayersCount == 4)
    {
        <ShowResults Match="_match" RefreshMatch="GetMatch"></ShowResults>
    }

    <EditMatch Match="_match" Visible="_editModalVisible" ConfirmationChanged="EditMatch"></EditMatch>
    <ConfirmationModal ConfirmationChanged="RemoveMatch" Visible="_deleteModalVisible" Title="Delete Match" Message="Are you sure you want to delete this match?"></ConfirmationModal>
}

@code {
    [Parameter]
    public Guid? MatchId { get; set; }
    
    private bool _loading;

    private string MatchPath => $"match/{MatchId}/detail";
    
    private MatchResponse? _match;
    private bool _editModalVisible;
    private bool _deleteModalVisible;
    private double _matchPrice;
    private string _hourWord = "hour";   
    
    private HubConnection hubConnection;
    private bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()  
            .WithUrl(NavigationManager.ToAbsoluteUri("/allmatcheshub"))  
            .Build();  
  
        await hubConnection.StartAsync();  
        
        await GetMatch();
        if (_match != null)
        {
            _matchPrice = _match.PricePerHour * _match.Duration;
            if (_match.Duration != 1)
            {
                _hourWord = "hours";
            }
        }
    }

    private async Task GetMatch()
    {
        if (MatchId.HasValue)
        {
            try
            {
                _loading = true;
                HttpResponseMessage? response;
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                if (authState.User.Identity?.IsAuthenticated == false)
                {
                    var http = HttpClientFactory.CreateClient("PadelPoint.ServerAPI.Anonymous");
                    response = await http.GetAsync($"match/{MatchId.Value}");
                }
                else
                {
                    response = await Http.GetAsync($"match/{MatchId.Value}");
                }

                if (response.IsSuccessStatusCode)
                {
                    _match = await response.Content.ReadFromJsonAsync<MatchResponse>();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(error);
                }
            }
            catch (Exception)
            {
                ToastService.ShowError("Something went wrong, please try again later.");
            }
            finally
            {
                _loading = false;
            }
        }
    }
    
    private async Task Share()
    {
        var url = NavigationManager.Uri;
        await ClipboardService.CopyToClipboard(url);
        ToastService.ShowSuccess("Link copied to clipboard.");
    }
    
    private void ShowEditModal()
    {
        _editModalVisible = true;
    }
    
    private void ShowRemoveModal()
    {
        _deleteModalVisible = true;
    }
    
    private async Task RemoveMatch(bool removeIt)
    {
        _loading = true;
        if (removeIt)
        {
            try
            {
                var response = await Http.DeleteAsync($"match/{MatchId.Value}");
        
                if(response.IsSuccessStatusCode)
                {
                    ToastService.ShowInfo("Match has been removed successfully.");
                    if (IsConnected)
                    {
                        await SendMessage();
                    }
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(error);
                }
            }
            catch (Exception)
            {
                ToastService.ShowError("Something went wrong, please try again later.");
            }
           
        }
        _loading = false;
        _deleteModalVisible = false;
    }
    
    private async Task EditMatch(CreateMatchRequest? editMatchRequest)
    {
        _loading = true;
        if (editMatchRequest != null)
        {
            try
            {
                var response = await Http.PutAsJsonAsync($"match/{MatchId.Value}", editMatchRequest);

                if(response.IsSuccessStatusCode)    
                {
                    ToastService.ShowInfo("Match has been updated successfully.");
                    if (IsConnected)
                    {
                        await SendMessage();
                    }
                    await GetMatch();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(error);
                }
            }
            catch (Exception)
            {
                ToastService.ShowError("Something went wrong, please try again later.");
            }
        }
        
        _editModalVisible = false;
        _loading = false;
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

}

<style>

    .action-buttons{
        display: flex;
        justify-content: space-evenly;
        margin-top: 12px;
    }
    
    .border-match-detail
    {
        position: relative;
        padding: 12px;
        border-radius: 10px;   
        display: flex;  
        background-color: white;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
    }
    
    .top-right {
        position: absolute;
        top: -18px;
        right: -5px;
        padding: 10px;
    }
    
    .grey-typo
    {
        color: grey;
    }
    
    .info
    {
        flex-direction: column;
        margin-bottom: 5px;
    }
    
    .info-footer
    {
        display: flex;  
        flex-direction: row;
        justify-content: space-between;
    }
    
    .info-footer-box
    {
        display: flex;  
        flex-direction: column;    
    }
    
    .info-footer-box-content
    {
        text-align: center;
    }    
    
    .player-avatar img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
     
    .match-detail-private {
        display: flex;
        justify-content: space-around;
        align-items: center;
        padding: 12px;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
        margin-bottom: 5px;
        position: relative;
        border-radius: 10px;   
        background-color: white;
    }
    
    .match-detail-private i {
        margin-right: 8px;
    }
    
    .match-detail-private p {
        margin: 0;
    }
    
    .status, .creator, .share {
        display: flex;
        align-items: center;
        justify-content: center;
    }
</style>
