@page "/match/{MatchId:guid}/detail"

@using EventsManager.Shared.Responses
@using EventsManager.Client.Components.Modals
@using EventsManager.Client.Components.Match
@using EventsManager.Client.Components.Match.Results
@using EventsManager.Shared.Requests

@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@if (_loading)
{
    <LoadingSpinner></LoadingSpinner>
}
@if (_match == null)
{
    <LoadingSpinner></LoadingSpinner>
}
else
{
    <div class="border info">
        <div>
            PADEL
        </div>
        <div style="font-size: 12px">
            @_match.StartDateTime.ToLocalTime().ToLongDateString() / @_match.StartDateTime.ToLocalTime().ToShortTimeString() - @_match.EndDateTime.ToLocalTime().ToShortTimeString()
        </div>
        <div class="separation"></div>
        <div class="info-footer">
            <div class="info-footer-box">
                <div class="info-footer-box-content">
                    Gender     
                </div>
                <div class="info-footer-box-content grey-typo">
                    Not set     
                </div>
            </div>
            <div class="info-footer-box">
                <div class="info-footer-box-content">
                    Level     
                </div>
                <div class="info-footer-box-content grey-typo">
                    All
                </div>
            </div>
            <div class="info-footer-box">
                <div class="info-footer-box-content">
                    Price     
                </div>
                <div class="info-footer-box-content grey-typo">
                    -
                </div>
            </div>
        </div>
    </div>
    <div class="border match-detail-private">
        @if (_match.IsPrivate)
        {
            <div class="status">
                <i class="bi bi-lock"></i> <p> Private</p>
            </div>
        }
        else
        {
            <div class="status">
                <i class="bi bi-unlock"></i> <p style="font-size: 12px"> Public</p>
            </div>
        }
        <div class="separator"></div>
        <div class="creator">
            <p style="font-size: 12px">Created By: Arki</p>
        </div>
    </div>
    
    <MatchDetailPlayers RefreshMatch="GetMatch" Match="_match"></MatchDetailPlayers>

    @if (_match.PlayersCount == 4)
    {
        <ShowResults Match="_match" RefreshMatch="GetMatch"></ShowResults>
    }
    
    <div class="border match-detail-location">
        @_match.Location                        
    </div>
    
    <div class="action-buttons">
        @if (_match.RequesterIsTheCreator)
        {
            <button class="btn btn-primary" @onclick="ShowEditModal">Edit</button>
            <button class="btn btn-danger" @onclick="ShowRemoveModal">Delete</button>
        }
    </div>


    <EditMatch Match="_match" Visible="_editModalVisible" ConfirmationChanged="EditMatch"></EditMatch>
    <ConfirmationModal ConfirmationChanged="RemoveMatch" Visible="_deleteModalVisible" Title="Delete Match" Message="Are you sure you want to delete this match?"></ConfirmationModal>
}

@code {
    [Parameter]
    public Guid? MatchId { get; set; }
    private bool _loading = false;

    private MatchResponse? _match;
    private bool _editModalVisible;
    private bool _deleteModalVisible;   
    
    protected override async Task OnInitializedAsync()
    {
        await GetMatch();
    }

    private async Task GetMatch()
    {
        _loading = true;
        if (MatchId.HasValue)
        {
            HttpResponseMessage? response;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == false)
            {
                var http = HttpClientFactory.CreateClient("PadelPoint.ServerAPI.Anonymous");
                response = await http.GetAsync($"match/{MatchId.Value}");
            }
            else
            {
                response = await Http.GetAsync($"match/{MatchId.Value}");
            }

            if (response.IsSuccessStatusCode)
            {
                _match = await response.Content.ReadFromJsonAsync<MatchResponse>();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
        _loading = false;
    }
    
    private void ShowEditModal()
    {
        _editModalVisible = true;
    }
    
    private void ShowRemoveModal()
    {
        _deleteModalVisible = true;
    }
    
    private async Task RemoveMatch(bool removeIt)
    {
        _loading = true;
        if (removeIt)
        {
            var response = await Http.DeleteAsync($"match/{MatchId.Value}");
        
            if(response.IsSuccessStatusCode)
            {
                ToastService.ShowInfo("Match has been removed successfully.");
                NavigationManager.NavigateTo("/");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
        _loading = false;
        _deleteModalVisible = false;
    }
    
    private async Task EditMatch(CreateMatchRequest? editMatchRequest)
    {
        _loading = true;
        if (editMatchRequest != null)
        {   
            var response = await Http.PutAsJsonAsync($"match/{MatchId.Value}", editMatchRequest);

            if(response.IsSuccessStatusCode)    
            {
                ToastService.ShowInfo("Match has been updated successfully.");
                await GetMatch();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
        
        _editModalVisible = false;
        _loading = false;
    }
}

<style>

    .action-buttons{
        display: flex;
        justify-content: space-evenly;
        margin-top: 12px;
    }
    .border
    {
        margin: 12px;
        padding: 12px;
        border: 2px solid grey;
        border-radius: 10px;   
        display: flex;  
        background-color: white;
    }
    
    .grey-typo
    {
        color: grey;
    }
    
    .info
    {
        flex-direction: column;
    }
    
    .info-footer
    {
        display: flex;  
        flex-direction: row;
        justify-content: space-between;
    }
    
    .info-footer-box
    {
        display: flex;  
        flex-direction: column;    
        margin: 12px;
    }
    
    .info-footer-box-content
    {
        text-align: center;
    }
    
  
    
    .separation
    {
        margin-top: 5px;
        margin-bottom: 5px;
        border: 0.5px solid grey;
    }
    
    .player-avatar img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .default-avatar button {
        color: green;
        background: none;
        border: none;
        font-size: 30px;
        cursor: pointer;
        position: absolute;
    }   
     
    .match-detail-private {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 0;
    }
    
    .match-detail-private i {
        margin-right: 8px;
    }
    
    .match-detail-private p {
        margin: 0;
    }
    
    .status, .creator {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 45%;
    }
    
    .separator {
        width: 2px;
        background-color: grey;
        height: 50%;
        align-self: center;
    }
</style>
