@page "/match/{MatchId:guid}/detail"

@using EventsManager.Shared.Responses
@inject HttpClient Http
@inject IToastService ToastService

@if (_match == null)
{
    <LoadingSpinner></LoadingSpinner>
}
else
{
    <div class="border info">
        <div>
            PADEL
        </div>
        <div>
            @_match.StartDateTime.ToLocalTime().ToLongDateString() / @_match.StartDateTime.ToLocalTime().ToShortTimeString() - @_match.EndDateTime.ToLocalTime().ToShortTimeString()
        </div>
        <div class="separation"></div>
        <div class="info-footer">
            <div class="info-footer-box">
                <div class="info-footer-box-content">
                    Gender     
                </div>
                <div class="info-footer-box-content grey-typo">
                    Not set     
                </div>
            </div>
            <div class="info-footer-box">
                <div class="info-footer-box-content">
                    Level     
                </div>
                <div class="info-footer-box-content grey-typo">
                    All
                </div>
            </div>
            <div class="info-footer-box">
                <div class="info-footer-box-content">
                    Price     
                </div>
                <div class="info-footer-box-content grey-typo">
                    -
                </div>
            </div>
        </div>
    </div>
    <div class="border match-detail-private">
        @if (_match.IsPrivate)
        {
            <i class="bi bi-lock"></i> <p> Private</p>
        }
        else
        {
            <i class="bi bi-unlock"></i> <p> Public</p>
        }
    </div>
    <div class="border match-detail-players">
        <div>
            Players
        </div>
        <div class="teams">

            <div class="team">
                Team 1
                <div class="players-grid">
                    @for(var i=0; i<2; i++)
                    {
                        if (i < _match.PlayersTeamOne.Count())
                        {
                            var player = _match.PlayersTeamOne[i];
                            <div class="player">
                                @if (player?.ImageUrl != null)
                                {
                                    <img src="@player.ImageUrl" alt="Player avatar" class="player-avatar">
                                }
                                else
                                {
                                    <div class="default-avatar">
                                    </div>
                                }
                                <p>@player?.NickName</p>
                                <p>@player?.Elo</p>
                            </div>
                        }
                        else
                        {
                            <div class="player">
                                <div class="default-avatar">
                                    <button onclick="@(() => AddPlayer(1, i))">+</button>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>

            <div class="team">
                Team 2
                <div class="players-grid">
                    @for(int i=0; i<2; i++)
                    {
                        if (i < _match.PlayersTeamTwo.Count())
                        {
                            var player = _match.PlayersTeamTwo[i];
                            <div class="player">
                                @if (player?.ImageUrl != null)
                                {
                                    <img src="@player.ImageUrl" alt="Player avatar" class="player-avatar">
                                }
                                else
                                {
                                    <div class="default-avatar">
                                    </div>
                                }
                                <p>@player?.NickName</p>
                                <p>@player?.Elo</p>
                            </div>
                        }
                        else
                        {
                            <div class="player">
                                <div class="default-avatar">
                                    <button onclick="@(() => AddPlayer(2, i))">+</button>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="border match-detail-location">
        @_match.Location                        
    </div>
}

@code {
    [Parameter]
    public Guid? MatchId { get; set; }

    private MatchResponse? _match;

    protected override async Task OnInitializedAsync()
    {
        if (MatchId.HasValue)
        {
            var response = await Http.GetAsync($"match/{MatchId.Value}");

            if(response.IsSuccessStatusCode)
            {
                _match = await response.Content.ReadFromJsonAsync<MatchResponse>();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
    }
    
    void AddPlayer(int team, int position)
    {
    // Your code goes here
    }
}
<style>
    .border
    {
        margin: 12px;
        padding: 12px;
        border: 2px solid grey;
        border-radius: 10px;   
        display: flex;  
        background-color: white;
    }
    
    .grey-typo
    {
        color: grey;
    }
    
    .info
    {
        flex-direction: column;
    }
    
    .info-footer
    {
        display: flex;  
        flex-direction: row;
        justify-content: space-between;
    }
    
    .info-footer-box
    {
        display: flex;  
        flex-direction: column;    
        margin: 12px;
    }
    
    .info-footer-box-content
    {
        text-align: center;
    }
    
    .match-detail-players {
      display: flex;
      flex-direction: column;
    }
    .separation
    {
        margin-top: 5px;
        margin-bottom: 5px;
        border: 0.5px solid grey;
    }
    
    .teams {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }
    
    .team {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    
    /* Rest of your styles */
    
    .players-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 10px;
    }
    
    .player {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 60px;
        font-size: 12px;
    }
    
    .player-avatar, .default-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }
    
    .player-avatar img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .default-avatar button {
        color: green;
        background: none;
        border: none;
        font-size: 30px;
        cursor: pointer;
        position: absolute;
    }

    
    .default-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: grey;
    }
</style>
