@page "/matches-manager"
@using EventsManager.Shared.Responses
@using Color = Blazorise.Color

@inject NavigationManager NavManager

@inject HttpClient Http
@inject IToastService ToastService
@inject IMessageService MessageService

<h3>Matches Manager</h3>

<Divider></Divider>
    <Button Color="Color.Primary" Clicked="Simulate">Match Simulator</Button>
<Divider></Divider>

<h4>All matches</h4>

@if (_matches != null)
{
    @if (_matches.Any())
    {
        foreach (var match in _matches)
        {
            <Divider></Divider>
            <div @onclick="() => GoToMatch(match.Id)">
                <b>Id: </b>@match.Id
                <br/>
                <b>CreationDate: </b>@match.CreationDate
                <br/>
                <b>Private: </b>@match.IsPrivate
                <br/>
                <b>Average Elo: </b>@match.AverageElo
                <br/>
                <b>Creator: </b>@match.CreatorNickName
                <br/>
                <b>Start date: </b>@match.StartDateTime 
                <br/>
                <b>Finished: </b>@match.Finished
                <br/>
                <b>TeamOne: </b>
                @foreach (var player in @match.PlayersTeamOne)
                {
                    @player.NickName @PlusSymbol
                }
                <br/>
                <b>TeamTwo: </b>
                @foreach (var player in @match.PlayersTeamTwo)
                {
                    @player.NickName @PlusSymbol
                }
                <br/>
            </div>
            <Button Size="Size.Small" Clicked="() => DeleteMatch(match.Id)" Color="Color.Danger">Delete Match</Button>
            @if (match.Finished)
            {
                <Button Size="Size.Small" Clicked="() => DeletePunctuation(match.Id)" Color="Color.Warning">Delete Punctuation</Button>
            }
            @if (match.IsBlocked)
            {
                <Button Size="Size.Small" Clicked="() => BlockMatch(match.Id, false)" Color="Color.Dark">Unblock match</Button>

            }
            @if (!match.IsBlocked)
            {
                <Button Size="Size.Small" Clicked="() => BlockMatch(match.Id, true)" Color="Color.Dark">Block match</Button>
            }
        }
    }
    else
    {
        <p>No matches found.</p>
    }
}

<Divider></Divider>


@code {
    private List<MatchAdministratorResponse>? _matches;
    private const string PlusSymbol = " + ";

    protected override async Task OnInitializedAsync()
    {
        await GetAll();
    }

    private async Task GetAll()
    {
        try
        {
            var response = await Http.GetAsync("MatchManager/all");

            if (response.IsSuccessStatusCode)
            {
                _matches = await response.Content.ReadFromJsonAsync<List<MatchAdministratorResponse>>();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
        catch (Exception)
        {
            ToastService.ShowError("Something went wrong, please try again later.");
        }
    }

    private async Task DeleteMatch(Guid matchId)
    {
        if (await MessageService.Confirm( "Are you sure?", "Delete match"))
        {
            try
            {
                var response = await Http.DeleteAsync($"MatchManager/{matchId}");

                if (response.IsSuccessStatusCode)
                {
                    ToastService.ShowSuccess("Match deleted successfully.");
                    await GetAll();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(error);
                }
            }
            catch(Exception)
            {
                ToastService.ShowError("Something went wrong, please try again later.");
            }
        }   
    }
    
    private async Task DeletePunctuation(Guid matchId)
    {
        if (await MessageService.Confirm( "Are you sure?", "Delete punctuation"))
        {
            try
            {
                var response = await Http.PostAsync($"MatchManager/delete-punctuation/{matchId}", null);

                if (response.IsSuccessStatusCode)
                {
                    ToastService.ShowSuccess("Match deleted successfully.");
                    await GetAll();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(error);
                }
            }
            catch(Exception)
            {
                ToastService.ShowError("Something went wrong, please try again later.");
            }
        }   
    }

    private void GoToMatch(Guid matchId)
    {
        NavManager.NavigateTo($"match/{matchId}/detail");
    }

    private async Task Simulate()
    {
        await Http.PostAsync($"MatchManager/simulate", null);
    }

    private async Task BlockMatch(Guid matchId, bool block)
    {
        if (await MessageService.Confirm( "Are you sure?", "Block/UnBlock match"))
        {
            try
            {
                var response = await Http.PostAsync($"MatchManager/{matchId}/block/{block}", null);

                if (response.IsSuccessStatusCode)
                {
                    ToastService.ShowSuccess("Match blocked/unblocked successfully.");
                    await GetAll();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(error);
                }
            }
            catch(Exception)
            {
                ToastService.ShowError("Something went wrong, please try again later.");
            }
        }   
    }

}
