@page "/my-matches"

@using EventsManager.Shared.Responses

@inject HttpClient Http
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<h3>My Matches</h3>

@if (_loading)
{
    <AllMatchesSkeleton></AllMatchesSkeleton>
}
@if (_myMatches != null)
{
    @foreach (var match in _myMatches)
    {
        <div class="match-card" @onclick="() => NavigateToMatch(match.Id)">
             @if (match.Finished)
             {
                 <div class="finished-stamp">Finished</div>
             }
             @if (match.PlayersCount < 4)
             {
                 <div class="searching-stamp">Open slots</div>
             }
             @if (match.PlayersCount == 4 && !match.Finished)
             {
                 <div class="pending-stamp">Pending</div>
             }
            <div class="match-date">
                @match.StartDateTime.ToLocalTime().ToLongDateString() @match.StartDateTime.ToLocalTime().ToShortTimeString() Duration: @match.Duration h
            </div>
            <Divider Style="margin: 0 0 5px 0"></Divider>
            <div class="match-info">
                <div class="match-info-item">
                    <div class="info-title">
                        Average Elo
                    </div>
                    <div class="info-value">
                        @match.AverageElo
                    </div>
                </div>
                <div class="match-info-item">
                    <div class="info-title">
                        Your status
                    </div>
                    <div class="info-value">
                        @if (match.RequesterIsTheCreator)
                        {
                            @Creator
                        }
                        else
                        {
                            @Player
                        }
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private bool _loading;

    private List<MyMatchesResponse>? _myMatches;

    const string Creator = "Creator";
    const string Player = "Player";
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loading = true;
            var response = await Http.GetAsync($"match/my");

            if (response.IsSuccessStatusCode)
            {
                _myMatches = await response.Content.ReadFromJsonAsync<List<MyMatchesResponse>>();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
        catch (Exception)
        {
            ToastService.ShowError("Something went wrong, please try again later.");
        }
        finally
        {
            _loading = false;
        }
    }
    
    private void NavigateToMatch(Guid id)
    {
        NavigationManager.NavigateTo($"/match/{id}/detail");
    }
}

<style>
    .match-card {
        border: 1px solid #ccc;
        border-radius: 8px;
        background-color: white;
        padding: 0 10px 10px 10px;
        margin-bottom: 10px;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
        position: relative;
    }

    .match-date {
        font-size: 12px; 
        text-align: center;
        margin: 10px 0;
    }

    .match-info {
        display: flex;
        justify-content: space-evenly;
        width: 100%;
    }

    .match-info-item {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .info-title {
        margin-bottom: 5px;
    }

    .info-value {
        font-size: 14px;
    }
    
    .finished-stamp {
        position: absolute;
        bottom: 10px;
        right: 10px;
        width: 100px;
        height: 20px;
        background-color: transparent;
        color: limegreen;
        border: 2px solid limegreen;
        display: flex;
        align-items: center; /* center text vertically */
        justify-content: center; /* center text horizontally */
        overflow: hidden;
        font-weight: bold;
        font-size: 14px;
    }
    
    .searching-stamp {
        position: absolute;
        bottom: 10px;
        right: 10px;
        width: 100px;
        height: 20px;
        background-color: transparent;
        color: darkblue;
        border: 2px solid darkblue;
        display: flex;
        align-items: center; /* center text vertically */
        justify-content: center; /* center text horizontally */
        overflow: hidden;
        font-weight: bold;
        font-size: 14px;
    }
    
    .pending-stamp {
        position: absolute;
        bottom: 10px;
        right: 10px;
        width: 100px;
        height: 20px;
        background-color: transparent;
        color: #ffaf00;
        border: 2px solid #ffaf00;
        display: flex;
        align-items: center; /* center text vertically */
        justify-content: center; /* center text horizontally */
        overflow: hidden;
        font-weight: bold;
        font-size: 14px;
    }
</style>
