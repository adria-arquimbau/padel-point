@page "/create-match"

@using EventsManager.Shared.Requests
@using EventsManager.Shared.Responses
@using EventsManager.Shared.Enums
@using Microsoft.AspNetCore.SignalR.Client
@using Color = Blazorise.Color
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IToastService ToastService
@implements IAsyncDisposable

@if (_loading)
{
    <LoadingSpinner></LoadingSpinner>
}

<div class="create-match">
    <h3>Create Match</h3>
    <form id="newMatchForm" class="my-form" @onsubmit="HandleValidSubmit">
        <div class="form-group">
            <label>Select the date and starting time</label>
            <DateEdit TValue="DateTime" @bind-Date="@_start" InputMode="DateInputMode.DateTime"/>
        </div>
        <div class="form-group">
            <Switch @bind-Checked="@_requiredSpecificLevel" TValue="bool">Required specific level</Switch>
        </div>
        @if (_requiredSpecificLevel)
        {
            <div class="form-group">
                <label>Minimum level</label>
                <NumericPicker @bind-Value="@_minimumLevel" ModifyValueOnWheel WheelOn="NumericWheelOn.Hover"/>
            </div>
        }
        <div class="form-group">
            <label>Duration</label>
            <Select @bind-SelectedValue="@_durationSelect" TValue="int">
                <SelectItem Value="1">1 hour</SelectItem>
                <SelectItem Value="2">1,5 hours</SelectItem>
                <SelectItem Value="3">2 hours</SelectItem>
                <SelectItem Value="4">2,5 hours</SelectItem>
                <SelectItem Value="5">3 hours</SelectItem>
            </Select>
        </div>
        <div class="form-group">
            <label>Price per hour:</label>
            <NumericEdit TValue="double" @bind-Value="@_pricePerHour"/>
        </div>
        <div class="form-group">
            <label>Location</label>
            <Select @bind-SelectedValue="@_location" TValue="MatchLocation">
                <SelectItem Value="MatchLocation.PadelBaseSalzburg">Padel Base Salzburg</SelectItem>
                <SelectItem Value="MatchLocation.None">-</SelectItem>
            </Select>
        </div>
        @if (_location == MatchLocation.PadelBaseSalzburg)
        {
            <div class="form-group">
                <label>Court number</label>
                <Select @bind-SelectedValue="@_courtNumber" TValue="int?">
                    <SelectItem Value="1">1</SelectItem>
                    <SelectItem Value="2">2</SelectItem>
                    <SelectItem Value="3">3</SelectItem>
                    <SelectItem Value="4">4</SelectItem>
                </Select>
            </div>
        }
        <div class="form-group">
            <Switch @bind-Checked="@_competitiveMatch" TValue="bool">Competitive match</Switch>
        </div>
        @if (_competitiveMatch)
        {
            <Alert Color="Color.Info" Visible>
                <Paragraph>
                    This mage will rank you up or down depending on the result.
                </Paragraph>
            </Alert>
        }
        <div class="form-group">
            <Switch @bind-Checked="@_isPrivate" TValue="bool">Private match</Switch>
        </div>
        <button type="submit" class="btn btn-primary">Create Match</button>
    </form>
</div>

@code {

    private DateTime _start = DateTime.Now;
    private int _durationSelect = 1;
    private int? _minimumLevel = 1500;
    private MatchLocation _location = MatchLocation.PadelBaseSalzburg;
    private double _pricePerHour;
    private bool _isPrivate;
    private bool _competitiveMatch = true;
    private bool _loading;
    private int? _courtNumber;
    private bool _requiredSpecificLevel;
    private HubConnection hubConnection;
    private bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()  
    {  
        hubConnection = new HubConnectionBuilder()  
            .WithUrl(NavManager.ToAbsoluteUri("/allmatcheshub"))  
            .Build();  
  
        await hubConnection.StartAsync();  
    }  
    
    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    private async Task HandleValidSubmit()
    {
        _loading = true;
        var durationInHours = _durationSelect switch
        {
            1 => 1,
            2 => 1.5,
            3 => 2,
            4 => 2.5,
            5 => 3,
            _ => 1
            };

        if (_requiredSpecificLevel == false)
        {
            _minimumLevel = null;
        }
        var request = new CreateMatchRequest
        {
            StartDate = _start,
            Duration = durationInHours,
            IsPrivate = _isPrivate,
            PricePerHour = _pricePerHour,
            Location = _location,
            MinimumLevel = _minimumLevel,
            CompetitiveMatch = _competitiveMatch,
            CourtNumber = _location == MatchLocation.PadelBaseSalzburg ? _courtNumber : null
        };

        try
        {
            var response = await Http.PostAsJsonAsync("match", request);
        
            if(response.IsSuccessStatusCode)
            {
                if (IsConnected)
                {
                    await SendMessage();
                }
                var createdMatch = await response.Content.ReadFromJsonAsync<CreateMatchResponse>();
                NavManager.NavigateTo($"/match/{createdMatch?.Id}/detail");
                ToastService.ShowSuccess("Match created successfully.");
            }
            else
            {
                ToastService.ShowError("Something went wrong. Please try again later.");
            }
        }
        catch (Exception)
        {
            ToastService.ShowError("Something went wrong. Please try again later.");
        }
        finally
        {
            _loading = false;
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}

<style>
    .create-match{
        max-width: 400px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
</style>