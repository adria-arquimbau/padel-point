@page "/create-match"

@using EventsManager.Shared.Requests
@using EventsManager.Shared.Responses
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IToastService ToastService

<h3>Create Match</h3>

<EditForm Model="@_newMatch" OnValidSubmit="HandleValidSubmit" class="my-form">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="form-group">
        <label>Start Date:</label>
        <InputDate class="form-control" @bind-Value="_newMatch.StartDateTime" format="dd MMM yyyy" />
    </div>

    <div class="form-group">
        <label>End Date:</label>
        <InputDate class="form-control" @bind-Value="_newMatch.EndDateTime" format="dd MMM yyyy" />
    </div>

    <div class="form-group">
        <label for="location">Location:</label>
        <InputText @bind-Value="_newMatch.Location" id="location" name="location" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Create Match</button>
</EditForm>

@code {
    private CreateMatchRequest _newMatch = new()
    {
        StartDateTime = DateTime.Now,
        EndDateTime = DateTime.Now.AddHours(1.5)
    };

    private async Task HandleValidSubmit()
    {
        var response = await Http.PostAsJsonAsync("match", _newMatch);
        
        if(response.IsSuccessStatusCode)
        {
            var createdMatch = await response.Content.ReadFromJsonAsync<CreateMatchResponse>();
            NavManager.NavigateTo($"/match/{createdMatch?.Id}/detail");
            ToastService.ShowSuccess("Match created successfully.");
        }
        else
        {
            ToastService.ShowError("Something went wrong. Please try again later.");
        }
    }
}
