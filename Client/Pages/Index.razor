@page "/"

@inject HttpClient Http

@using EventsManager.Client.Components.User
@using EventsManager.Client.Components.Match
@using EventsManager.Client.Components.Players
@using EventsManager.Client.Components

@using EventsManager.Client.Components.Notifications
@using EventsManager.Shared.Dtos
@using System.Net

<PageTitle>Welcome</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Hello, @context.User.Identity?.Name! <UserImage></UserImage></h1> Welcome to Padel Point.
         <Notifications></Notifications>
    </Authorized>
    <NotAuthorized>
        <LoginDisplay></LoginDisplay>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView>
    <Authorized>
        @if(_player != null)
        {
            @if (_player.InitialLevelFormDone == false)
            {
                <InitialLevelForm IsDone="@_player.InitialLevelFormDone"></InitialLevelForm>
            }
            @if (_player.DevelopmentAnnouncementReadIt == false)
            {
                <DevelopmentVersionAnnouncement IsDone="@_player.DevelopmentAnnouncementReadIt"></DevelopmentVersionAnnouncement>
            }
        }
    </Authorized>
</AuthorizeView>

<AuthorizeView>
    <Authorized>
        <PlayerEloProgress></PlayerEloProgress>
    </Authorized>
</AuthorizeView>

<Divider />

<AllMatches></AllMatches>

@code
{
    private PlayerDto? _player;
    
    protected override async Task OnInitializedAsync()
    {
        await GetUser();
    }
    
    private async Task GetUser()    
    {
        try
        {
            var response = await Http.GetAsync($"player");

            if (response.IsSuccessStatusCode)
            {
                _player = await response.Content.ReadFromJsonAsync<PlayerDto>();
            }
            else
            {
              
            }
        }
        catch (Exception)
        {
    // ignored
        }
    }
}
