@page "/"

@inject HttpClient Http

@using EventsManager.Client.Components.Notifications
@using EventsManager.Client.Components.Match
@using EventsManager.Client.Components.Players
@using EventsManager.Client.Components
@using EventsManager.Client.Components.Banners
@using EventsManager.Shared.Responses

<PageTitle>Welcome</PageTitle>

<AuthorizeView>
    <Authorized>
        <GlobalPlayerNotificationsCard></GlobalPlayerNotificationsCard>
        @* <h2>Hello, @context.User.Identity?.Name! <UserImage></UserImage></h2> Welcome to Padel Point. TODO:  If not Used check where UserImage is used, if not used delete *@
        @* <Notifications></Notifications> *@
    </Authorized>
    <NotAuthorized>
        <GlobalPlayerNotificationsCard></GlobalPlayerNotificationsCard>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView>
    <Authorized>
        @if (_announcementDevelopmentResponse is {Done: false })
        {
            <DevelopmentVersionAnnouncement IsDone="@_announcementDevelopmentResponse.Done"></DevelopmentVersionAnnouncement>
        }
    </Authorized>
</AuthorizeView>
<Divider></Divider>
<NineTPadelBanner></NineTPadelBanner>

<AuthorizeView>
    <Authorized>
        <InvitedMatchesNotification></InvitedMatchesNotification>
    </Authorized>
</AuthorizeView>

<AllMatches></AllMatches>

@code
{
    private AnnouncementDevelopmentResponse? _announcementDevelopmentResponse;
    
    protected override async Task OnInitializedAsync()
    {
        await GetInfo();    
    }
    
    private async Task GetInfo()    
    {
        try
        {
            var response = await Http.GetAsync($"Announcement/development-announcement-read-it");

            if (response.IsSuccessStatusCode)
            {
                _announcementDevelopmentResponse = await response.Content.ReadFromJsonAsync<AnnouncementDevelopmentResponse>();
            }
            else
            {
              
            }
        }
        catch (Exception)
        {
    // ignored
        }
    }
}
    