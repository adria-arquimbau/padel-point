@page "/tournament/{TournamentId:guid}/detail"
@using EventsManager.Shared.Responses
@using EventsManager.Client.Components.Tournaments
@using EventsManager.Client.Components.Modals

@using Color = Blazorise.Color

@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IMessageService MessageService

@if (_loading)
{
    <MatchDetailSkeleton />
}
@if (!_loading && _tournament != null)
{
    <TournamentMainTab RefreshTournament="GetTournament" Tournament="_tournament"></TournamentMainTab>
    
    @if (_tournament is { IsPlayerAlreadySignedIn: false, RegistrationsOpen: true })
    {
        <AuthorizeView>
            <Authorized>
                <div class="tournament-card-actions">
                    <Button Size="@Size.Small" Color="@Color.Success" Clicked="OpenSignInTournamentModal">Sign In</Button>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="tournament-card-actions">
                    <Button Size="@Size.Small" Color="@Color.Success" Clicked="NavigateToLogIn">Log in to Sign In</Button>
                </div>
            </NotAuthorized>
        </AuthorizeView>
        
    }
    
    @if (_showFooterOptions)
    {
        @if (_tournament.IsPlayerAlreadySignedIn)
        {
            <div class="tournament-card-actions">
                @if (_tournament.IsPlayerAlreadySignedIn)
                {
                    <Button Size="Size.Small" Color="Color.Danger" Clicked="RemoveRegistration">Sign out</Button>
                }
            </div>
        }
    }
    
    <div class="return-card">
        <Button Size="Size.Small" Color="Color.Dark" Clicked="BackToTournaments">Back to tournaments</Button>
    </div>
}


<SignInTournamentModal RefreshTournament="GetTournament" Tournament="_tournament" Show="_showSignIn" DontShow="DontShowSignIn" />

@code {
    [Parameter]
    public Guid? TournamentId { get; set; }
    private bool _loading;
    
    private bool _showFooterOptions = true;
    private bool _showAdminOptions = false;
    
    private TournamentDetailResponse? _tournament;
    
    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await GetTournament();
    }
    
    private async Task GetTournament()
    {
        if (TournamentId.HasValue)
        {
            try
            {
                HttpResponseMessage? response;
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                if (authState.User.Identity?.IsAuthenticated == false)
                {
                    var http = HttpClientFactory.CreateClient("PadelPoint.ServerAPI.Anonymous");
                    response = await http.GetAsync($"tournament/{TournamentId.Value}");
                }
                else
                {
                    response = await Http.GetAsync($"tournament/{TournamentId.Value}");
                }

                if (response.IsSuccessStatusCode)
                {
                    _tournament = await response.Content.ReadFromJsonAsync<TournamentDetailResponse>();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(error);
                }
            }
            catch (Exception)
            {
                ToastService.ShowError("Something went wrong, please try again later.");
            }
            finally
            {
                _loading = false;
            }
        }
    }

   

    private void BackToTournaments()
    {
        NavigationManager.NavigateTo("/tournaments");    
    }

    private bool _showSignIn;

    private void OpenSignInTournamentModal()
    {
        _showSignIn = true;
    }

    private void DontShowSignIn()
    {
        _showSignIn = false;
    }
    


    private async Task RemoveRegistration()
    {
        if (await MessageService.Confirm( "Are you sure you want to remove your registration? Your team will be removed.", "Delete registration"))
        {
            try
            {
                HttpResponseMessage? response;
                response = await Http.DeleteAsync($"tournament/registration/{TournamentId}");

                if (response.IsSuccessStatusCode)
                {
                    ToastService.ShowSuccess("Registration removed successfully.");
                    await GetTournament();
                }   
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(error);
                }
            }
            catch (Exception)
            {
                ToastService.ShowError("Something went wrong, please try again later.");
            }
            finally
            {
                _loading = false;
            }
        }
    }
    
    private void NavigateToLogIn()
    {
        var returnUrl = $"/tournament/{TournamentId}/detail";
        NavigationManager.NavigateTo($"Identity/Account/Login?returnUrl={returnUrl}", forceLoad: true);
    }

}   

<style>
    .tournament-card-actions{
       max-width: 800px;
       padding: 12px;
       border-radius: 10px;   
       display: flex;  
       margin-top: 10px;
       flex-direction: row;
       background-color: white;
       box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
    }
    
    .tournament-card-actions > Button {
            flex: 1; /* This makes each button take up an equal amount of space within the container */
            margin: 0 2px; /* This provides a little space between the buttons */
        }
    
    .tournament-card-creator-actions > Button {
        flex: 1; /* This makes each button take up an equal amount of space within the container */
        margin: 0 2px; /* This provides a little space between the buttons */
    }

    
    .return-card{
        max-width: 800px;
        padding: 12px;
        border-radius: 10px;   
        margin-top: 10px;
        margin-bottom: 50px;
        display: flex;  
        flex-direction: column;
        background-color: white;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
    }
</style>
