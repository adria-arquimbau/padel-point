@page "/creatematch"
@using EventsManager.Shared.Dtos

@inject HttpClient Http

<h3>Create Match</h3>

<!-- Search Bar for Players -->
<div>
    <input placeholder="Search for player" @bind="_searchTerm" @oninput="SearchPlayers" />
    <ul>
        @if(_searchedPlayers != null)
        {
            @foreach (var player in _searchedPlayers)
            {
                <li>
                    @player.NickName
                    <button @onclick="() => AddPlayer(player)">Add</button>
                </li>
            }
        }
    </ul>
</div>

<!-- Padel Court Visualization -->
<div style="border: 1px solid black; width: 200px; height: 400px; position: relative;">
    <!-- Top Team Area -->
    <div style="position: absolute; top: 0; left: 0; width: 200px; height: 200px; border-bottom: 1px solid blue;"></div>
    <!-- Bottom Team Area -->
    <div style="position: absolute; bottom: 0; left: 0; width: 200px; height: 200px; border-top: 1px solid red;"></div>
    <!-- Net -->
    <div style="position: absolute; top: 50%; left: 0; width: 200px; height: 1px; background: black;"></div>
    
   @for (int i = 0; i < _selectedPlayers.Count; i++)
   {
       var player = _selectedPlayers[i];
       var positionTop = (i < 2) ? "10px" : "350px";
       var positionLeft = ((i == 0) || (i == 2)) ? "50px" : "150px";
       var teamColor = (i < 2) ? "blue" : "red"; // team 1 is blue, team 2 is red
       <div style="position: absolute; top: @positionTop; left: @positionLeft; color: @teamColor;">
           @player.NickName
           <div style="font-size: 0.8em;">Player @(i+1)</div>
       </div>
   }

</div>


<!-- Input Scores for Sets -->
@if(_selectedPlayers.Count == 4)
{
    <h4>Input Set Scores</h4>
    @for (int i = 0; i < NumberOfSets; i++)
    {
        int j = i; // local copy for correct lambda capturing
        <div>
            <label>Set @i Team1 Score:</label>
            <input type="number" @bind="_setScores[j].Team1Score" min="0" />
            <label>Set @i Team2 Score:</label>
            <input type="number" @bind="_setScores[j].Team2Score" min="0" />
        </div>
    }
    <button @onclick="CreateMatch">Submit Match</button>
}

@code {
    string _searchTerm = "";
    List<PlayerDto>? _searchedPlayers;
    List<PlayerDto> _selectedPlayers = new();
    List<SetDto> _setScores = new();
    private const int NumberOfSets = 3;
    bool _matchCreated;

    async Task SearchPlayers(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString();
        if (!string.IsNullOrEmpty(_searchTerm))
        {
            _searchedPlayers = await Http.GetFromJsonAsync<List<PlayerDto>>($"Player/search?term={_searchTerm}");
        }
    }

    void AddPlayer(PlayerDto player)
    {
        if (_selectedPlayers.Count < 4) // maximum four players
        {
            _selectedPlayers.Add(player);
            _searchedPlayers.Remove(player);
            if (_selectedPlayers.Count == 4)
            {
                for (var i = 0; i < NumberOfSets; i++)
                {
                    _setScores.Add(new SetDto { SetNumber = i + 1 }); // initialize with set numbers
                }
            }
        }
    }

    void RemovePlayer(PlayerDto player)
    {
        _selectedPlayers.Remove(player);
        _searchedPlayers.Add(player);
        if (_selectedPlayers.Count < 4)
        {
            _setScores.Clear();
        }
    }

    async Task CreateMatch()
    {
        //var match = new MatchDto { CreationDate = DateTime.UtcNow, Status = "scheduled", Players = _selectedPlayers, Sets = _setScores }; // assuming a status
        //await Http.PostAsJsonAsync("api/Match", match);
        // reset the form after submitting scores
        _searchTerm = "";
        _searchedPlayers = null;
        _selectedPlayers = new List<PlayerDto>();
        _setScores = new List<SetDto>();
        _matchCreated = false;
    }
}
