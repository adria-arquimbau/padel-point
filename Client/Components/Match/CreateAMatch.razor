@page "/creatematch"
@using EventsManager.Shared.Dtos
@inject HttpClient Http

<h3>Create Match</h3>

<!-- Player Table -->
<table>
    <thead>
        <tr>
            <th>Team</th>
            <th>Player</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Team 1</td>
            <td>@_player1?.NickName</td>
            <td>
                @if (_player1 == null)
                {
                    <button @onclick="() => OpenPlayerAssignmentModal(1)">Assign</button>
                }
                else
                {
                    <button @onclick="() => UnassignPlayer(1)">Remove</button>
                }
            </td>
        </tr>
        <tr>
            <td>Team 1</td>
            <td>@_player2?.NickName</td>
            <td>
                @if (_player2 == null)
                {
                    <button @onclick="() => OpenPlayerAssignmentModal(2)">Assign</button>
                }
                else
                {
                    <button @onclick="() => UnassignPlayer(2)">Remove</button>
                }
            </td>
        </tr>
        <tr>
            <td>Team 2</td>
            <td>@_player3?.NickName</td>
            <td>
                @if (_player3 == null)
                {
                    <button @onclick="() => OpenPlayerAssignmentModal(3)">Assign</button>
                }
                else
                {
                    <button @onclick="() => UnassignPlayer(3)">Remove</button>
                }
            </td>
        </tr>
        <tr>
            <td>Team 2</td>
            <td>@_player4?.NickName</td>
            <td>
                @if (_player4 == null)
                {
                    <button @onclick="() => OpenPlayerAssignmentModal(4)">Assign</button>
                }
                else
                {
                    <button @onclick="() => UnassignPlayer(4)">Remove</button>
                }
            </td>
        </tr>
    </tbody>
</table>

<!-- Player Assignment Modal -->
@if (_showPlayerAssignmentModal)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Assign Player</h5>
                <button type="button" class="modal-close-btn" @onclick="() => _showPlayerAssignmentModal = false">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <input class="search-input" placeholder="Search for player" @bind="_searchTerm" @oninput="SearchPlayers" />
                @if(_searchedPlayers != null)
                {
                    <ul class="player-list">
                        @foreach (var player in _searchedPlayers)
                        {
                            <li class="player-list-item">
                                <span class="player-list-nickname">@player.NickName</span>
                                <button class="assign-btn" @onclick="() => AssignPlayer(player)">Assign</button>
                            </li>
                        }
                    </ul>
                }
            </div>
        </div>
    </div>
}

@code {
    string _searchTerm = "";
    List<PlayerDto>? _searchedPlayers;
    PlayerDto? _player1 = null;
    PlayerDto? _player2 = null;
    PlayerDto? _player3 = null;
    PlayerDto? _player4 = null;
    bool _showPlayerAssignmentModal;
    int _currentPlayerNumber;

    async Task SearchPlayers(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString();
        if (!string.IsNullOrEmpty(_searchTerm))
        {
            var searchPlayersWithoutAssigned = await Http.GetFromJsonAsync<List<PlayerDto>>($"Player/search?term={_searchTerm}");
            searchPlayersWithoutAssigned.RemoveAll(player =>
                player.NickName == _player1?.NickName || 
                player.NickName == _player2?.NickName || 
                player.NickName == _player3?.NickName || 
                player.NickName == _player4?.NickName);
            _searchedPlayers = searchPlayersWithoutAssigned;
        }
    }

    void OpenPlayerAssignmentModal(int playerNumber)
    {
        _currentPlayerNumber = playerNumber;
        _showPlayerAssignmentModal = true;
    }

    void AssignPlayer(PlayerDto player)
    {
        if (_currentPlayerNumber == 1)
        {
            _player1 = player;
        }
        if (_currentPlayerNumber == 2)
        {
            _player2 = player;
        }
        if (_currentPlayerNumber == 3)
        {
            _player3 = player;
        }
        if (_currentPlayerNumber == 4)
        {
            _player4 = player;
        }

        _searchedPlayers = null;
        _searchTerm = ""; 
        _showPlayerAssignmentModal = false;
    }

    void UnassignPlayer(int playerNumber)
    {
        if (playerNumber == 1)
        {
            _player1 = null;
        }
        if (playerNumber == 2)
        {
            _player2 = null;
        }
        if (playerNumber == 3)
        {
            _player3 = null;
        }
        if (playerNumber == 4)
        {
            _player4 = null;
        }
    }
}

<style>
table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    border: 1px solid #ddd;
    padding: 8px;
}

tr:nth-child(even) {
    background-color: #f2f2f2;
}

th {
    padding-top: 12px;
    padding-bottom: 12px;
    text-align: left;
    background-color: #4CAF50;
    color: white;
}
body {
    font-family: Arial, sans-serif;
}

.team-area {
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
    width: 100%;
    height: 50%;
    border-bottom: 1px solid #00f;
    position: relative;
}

.player-slot {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 120px;
    height: 120px;
    border: 1px solid #ccc;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.player-slot:hover {
    background-color: #f0f0f0;
}


.player-card {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.player-image {
    width: 80px;
    height: 80px;
    border-radius: 50%;
}

.player-nickname {
    margin-top: 8px;
    font-size: 16px;
    text-align: center;
}

.remove-player-btn {
    margin-top: 8px;
    background-color: #f44336;
    color: #fff;
    border: none;
    cursor: pointer;
    font-size: 12px;
    padding: 4px 8px;
    border-radius: 4px;
}

.assign-player {
    text-align: center;
    font-size: 16px;
}

.modal {
    display: flex;
    justify-content: center;
    align-items: center;
    position: fixed;
    z-index: 9999;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
}

.modal-content {
    background-color: #fff;
    border-radius: 8px;
    width: 80%;
    max-width: 500px;
    padding: 16px;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
}

.modal-close-btn {
    border: none;
    background-color: transparent;
    font-size: 20px;
    cursor: pointer;
}

.search-input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.player-list {
    margin-top: 16px;
    list-style: none;
    padding: 0;
}

.player-list-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    margin-bottom: 8px;
}

.assign-btn {
    background-color: #4caf50;
    color: #fff;
    border: none;
    cursor: pointer;
    padding: 4px 8px;
    border-radius: 4px;
}

</style>
