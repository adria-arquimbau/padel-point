@using EventsManager.Shared.Responses
@using Color = System.Drawing.Color
@using EventsManager.Shared.Dtos
@using EventsManager.Client.Components.Match.Results

@inject NavigationManager NavigationManager

<div @onclick="GoToMatch" class="match-card" style="position: relative;">
    <div style="font-size: 12px; text-align: center;">
        @Match.StartDateTime.ToLongDateString() /
        @Match.StartDateTime.ToShortTimeString()
        <p style="font-size: 10px; margin: 0"><b>Average Elo:</b> @Match.AverageElo</p>
    </div>
    <FluentDivider></FluentDivider>
    <div class="main-section">
        <div class="score">
            @if (Match.Sets.Any())
            {
                <div class="team-score">
                    @Match.Sets.FirstOrDefault().Team1Score
                </div>
                <div class="team-score">
                    @Match.Sets.FirstOrDefault().Team2Score
                </div>
            }
            else
            {
                <div class="team-score">
                    0
                </div>
                <div class="team-score">
                    0
                </div>
            }
        </div>
        <div class="player-names">
            <div class="player-names-team">
                <div class="player-names-team1-title">
                    Team 1
                </div>
                <div class="player-names-team1-names">
                    <p style="@GetStyleForPlayerNames(Match.PlayersTeamOne.ElementAtOrDefault(0))">@GetPlayerName(Match.PlayersTeamOne.ElementAtOrDefault(0))</p>
                    <p style="@GetStyleForPlayerNames(Match.PlayersTeamOne.ElementAtOrDefault(1))">@GetPlayerName(Match.PlayersTeamOne.ElementAtOrDefault(1))</p>
                </div>
            </div>
            <Divider Style="margin: 0; width: 120px; float: right;"></Divider>
            <div class="player-names-team">
                <div class="player-names-team2-title">
                    Team 2
                </div>
                <div class="player-names-team2-names">
                    <p style="@GetStyleForPlayerNames(Match.PlayersTeamTwo.ElementAtOrDefault(0))">@GetPlayerName(Match.PlayersTeamTwo.ElementAtOrDefault(0))</p>
                    <p style="@GetStyleForPlayerNames(Match.PlayersTeamTwo.ElementAtOrDefault(1))">@GetPlayerName(Match.PlayersTeamTwo.ElementAtOrDefault(1))</p>
                </div>
            </div>
        </div>
    </div>
    @if (Match.RequesterIsTheCreator)
    {
        <Button Size="Size.ExtraSmall" Color="Blazorise.Color.Success" Clicked="AddResults">Add Result</Button>
    }
</div>

@code {
    [Parameter]
    public RoundRobinMatchResponse Match { get; set; }
    
    private string GetPlayerName(PlayerDto? playerDto)
    {
        if(playerDto == null)
        {
            return "Open slot";
        }
        
        return playerDto.NickName;
    }

    private string GetStyleForPlayerNames(PlayerDto? player)
    {
        if (player != null)
        {
            return "font-size: 12px; margin: 0";
        }
        return "font-size: 12px; margin: 0; color: grey;";
    }
    
    private void GoToMatch()
    {
        NavigationManager.NavigateTo($"match/{Match.Id}/detail");
    }

    private void AddResults()   
    {
        throw new NotImplementedException();
    }

}

<style>
    .match-card{
            padding: 10px;
         background-color: white;
         margin-bottom: 10px;
         margin-top: 10px;
         margin-right: 5px;
         box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
         max-width: 800px;
         min-width: 255px;
         display: flex; /* Add display: flex; to enable flex properties */
         flex-direction: column; /* Change to column layout */
    }
    
     .player-names {
            display: flex;
            flex-direction: column;
            align-items: end;
        }
        
        .player-names-team1-title {
            font-size: 8px;
            font-weight: bold;
            color: grey;
            margin-top: auto;
        }
        
        .player-names-team2-title {
            font-size: 8px;
            font-weight: bold;
            color: grey;
        }
        
        .player-names-team1-names {
            display: flex;
            flex-direction: column;
            align-items: end;
        }
        
        .player-names-team {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            width: 120px;
        }
        
        .player-names-team2-names{
            display: flex;
            flex-direction: column;
            align-items: end;
        }
        
        .main-section{
            display: flex;
            flex-direction: row;
            justify-content: space-between;
        }
        
        .score{
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            position: relative;
            top: -15px;
        }
        
        .team-score{
            font-size: 35px;
            font-weight: bold;
            color: grey;
            white-space: nowrap; /* Prevent the text from wrapping */
            overflow: hidden; /* Hide any overflow */
            text-overflow: ellipsis; /* Add an ellipsis for long text */
        }
</style>