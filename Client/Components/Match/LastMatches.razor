@using EventsManager.Shared.Responses

@inject IHttpClientFactory HttpClientFactory
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<Divider></Divider>
@if (_isLoading)
{
    <AllMatchesSkeleton></AllMatchesSkeleton>
}
@if (_matches != null)
{
    @foreach (var match in _matches)
    {
        <div class="match-card" @onclick="() => NavigateToMatch(match.Id)">
            <div class="match-stamp">
                @if (match.PlayerWon)
                {
                    <div class="won-stamp">Won</div>
                }
                else
                {
                    <div class="lost-stamp">Lost</div>
                }
            </div>
            <div class="match-date">
                @match.StartDateTime.ToLongDateString() @match.StartDateTime.ToShortTimeString() Duration: @match.Duration h
            </div>
            <Divider Style="margin: 0 0 5px 0"></Divider>
            <div class="match-info">
                <div class="match-info-item">
                    <div class="info-title">
                        Average Elo
                    </div>
                    <div class="info-value">
                        @match.AverageElo
                    </div>
                </div>
                <div class="match-info-item">
                    <div class="info-title">
                        Elo changed
                    </div>
                    <div class="info-value" style="color: @(match.EloChange >= 0 ? "limegreen" : "red")">
                        @(match.EloChange >= 0 ? "+" : "")@match.EloChange
                    </div>
                </div>
            </div>
        </div>
    }
}


@code {
    [Parameter]
    public Guid PlayerId { get; set; }
    
    private List<LastMatchesResponse>? _matches;
    private bool _isLoading = false;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            var http = HttpClientFactory.CreateClient("PadelPoint.ServerAPI.Anonymous");
            _matches = await http.GetFromJsonAsync<List<LastMatchesResponse>>($"player/{PlayerId}/last-matches");
        }
        catch (Exception)
        {
            ToastService.ShowError("Something went wrong, please try again later.");
        }
        finally
        {
            _isLoading = false; 
        }
    }

    private void NavigateToMatch(Guid id)
    {
        NavigationManager.NavigateTo($"/match/{id}/detail");
    }
}

<style>
    .match-card {
        border-radius: 8px;
        background-color: white;
        padding: 5px;
        margin-bottom: 10px;
        max-width: 641px;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
        position: relative;
    }

    .match-stamp {
        position: absolute;
        top: 70px;
        right: 8px;
    }

    .won-stamp, .lost-stamp {
        padding: 5px;
        font-size: 12px;
        text-align: center;
        border-radius: 3px;
        color: white;
    }

    .won-stamp {
        background-color: limegreen;
    }

    .lost-stamp {
        background-color: red;
    }

    .match-date {
        font-size: 12px; 
        text-align: center;
        margin: 10px 0;
    }

    .match-info {
        display: flex;
        justify-content: space-evenly;
        width: 100%;
    }

    .match-info-item {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .info-title {
        margin-bottom: 5px;
    }

    .info-value {
        font-size: 14px;
    }
</style>
