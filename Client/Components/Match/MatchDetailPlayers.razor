@using EventsManager.Shared.Responses
@using EventsManager.Client.Components.Match.Results
@using EventsManager.Shared
@using EventsManager.Shared.Dtos
@using EventsManager.Shared.Requests
@using Microsoft.AspNetCore.SignalR.Client

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IToastService ToastService
@inject IMessageService MessageService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="match-detail-players">
    <div class="teams">
        <div class="team @(Match.ScoreConfirmedTeamOne ? "team-confirmed" : "")">
            Team 1 
            <div class="players-grid">
                @for (var i = 0; i < 2; i++)
                {
                    if (i < Match.PlayersTeamOne.Count)
                    {
                        var player = Match.PlayersTeamOne[i];
                        <div class="player">
                            <div class="player-avatar">
                                @if (player.ImageUrl != null)
                                {
                                    <img src="@player.ImageUrl" alt="Player avatar" class="player-avatar-img"/>
                                }
                                else
                                {
                                    <img src="/default-avatar.png" alt="Default avatar" class="player-avatar-img"/>
                                }
                                @if (player.CanIDeleteIt || Match.RequesterIsTheCreator)
                                {
                                    @if (!Match.ScoreConfirmedTeamOne && !Match.ScoreConfirmedTeamTwo)
                                    {
                                        <button onclick="@(() => RemovePlayer(player.Id))" class="remove-button">-</button>
                                    }
                                }
                                @if (player.Country != null)
                                {
                                    <div class="player-country">
                                       <CountryFlag Size="FlagSize.Small" InputType="InputType.ISOA2" ISOA2="@player.Country" IsRounded="true" HasShadow="true"></CountryFlag>
                                    </div>
                                }
                            </div>
                            <p @onclick="@(() => NavigateToPlayerProfile(player.Id))">@player.NickName</p>
                            <div class="elo">@player.EloBeforeFinish</div>
                            <div class="gained-elo">
                                @if(Match.Finished)
                                {
                                    <span style="font-size: 10px" class="@(player.GainedElo > 0 ? "elo-change-positive" : "elo-change-negative")">
                                        @(player.GainedElo > 0 ? "+" : "")@player.GainedElo (@(player.GainedElo + player.EloBeforeFinish))
                                    </span>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="player">
                            <div class="default-avatar">
                                @if (!Match.IAmAlreadyRegistered)
                                {
                                    <button onclick="@(() => AddPlayer("Team1"))" class="add-button">+</button>
                                }
                            </div>
                        </div>
                    }
                }
            </div>
            @if (Match.PlayersTeamOne.Any() && Match.PlayersTeamTwo.Any())
            {
                <div class="team-average-elo-info">
                    <div>Avg Elo: @Match.AverageEloTeamOne</div>
                    <div>
                        Odds: 
                        <span class="@(Match.ProbabilityTeamOneWins >= 50 ? "odds-positive" : "odds-negative")">
                            @Match.ProbabilityTeamOneWins %
                        </span>
                    </div>
                </div>
            }
            @if (Match.ScoreConfirmedTeamOne)
            {
                <p style="font-size: 12px; color: green">Confirmed result</p>
            }
        </div>
        <div class="vs">
            vs
        </div>
        <div class="team @(Match.ScoreConfirmedTeamTwo ? "team-confirmed" : "")">
            Team 2
            <div class="players-grid">
                @for (var i = 0; i < 2; i++)
                {
                    if (i < Match.PlayersTeamTwo.Count)
                    {
                        var player = Match.PlayersTeamTwo[i];
                        <div class="player">
                            <div class="player-avatar">
                                @if (player.ImageUrl != null)
                                {
                                    <img  src="@player.ImageUrl" alt="Player avatar" class="player-avatar-img"/>
                                }
                                else
                                {
                                    <img src="/default-avatar.png" alt="Default avatar" class="player-avatar-img"/>
                                }
                                @if (player.CanIDeleteIt || Match.RequesterIsTheCreator)
                                {
                                    @if (!Match.ScoreConfirmedTeamOne && !Match.ScoreConfirmedTeamTwo)
                                    {
                                        <button onclick="@(() => RemovePlayer(player.Id))" class="remove-button">-</button>
                                    }
                                }
                               @if (player.Country != null)
                               {
                                   <div class="player-country">
                                       <CountryFlag Size="FlagSize.Small" InputType="InputType.ISOA2" ISOA2="@player.Country" IsRounded="true" HasShadow="true"></CountryFlag>
                                   </div>
                               }
                            </div>
                            <p @onclick="@(() => NavigateToPlayerProfile(player.Id))">@player.NickName</p>
                            <div class="elo">@player.EloBeforeFinish</div>
                            <div class="gained-elo">
                                @if(Match.Finished)
                                {
                                    <span style="font-size: 10px" class="@(player.GainedElo > 0 ? "elo-change-positive" : "elo-change-negative")">
                                        @(player.GainedElo > 0 ? "+" : "")@player.GainedElo (@(player.GainedElo + player.EloBeforeFinish))
                                    </span>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="player">
                            <div class="default-avatar">
                                @if (!Match.IAmAlreadyRegistered)
                                {
                                    <button onclick="@(() => AddPlayer("Team2"))" class="add-button">+</button>
                                }
                            </div>
                        </div>
                    }
                }
            </div>
            @if (Match.PlayersTeamOne.Any() && Match.PlayersTeamTwo.Any())
            {
                <div class="team-average-elo-info">
                    <div>Avg Elo: @Match.AverageEloTeamTwo</div>
                    <div>
                        Odds: 
                        <span class="@(Match.ProbabilityTeamTwoWins >= 50 ? "odds-positive" : "odds-negative")">
                            @Match.ProbabilityTeamTwoWins %
                        </span>
                    </div>
                </div>
            }
            @if (Match.ScoreConfirmedTeamTwo)
            {
                <p style="font-size: 12px; color: green">Confirmed result</p>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public MatchResponse? Match { get; set; }
    
    [Parameter] 
    public EventCallback RefreshMatch { get; set; }

    [Parameter]
    public string ReturnUrl {get; set;}

    private string? userId;
    private HubConnection hubConnection;
    //private HubConnection hubConnectionMatch;
    private bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    //private bool IsConnectedMatch => hubConnectionMatch.State == HubConnectionState.Connected;
    Task SendMessage() => hubConnection.SendAsync("SendMessage");
    //Task SendMessageMatch() => hubConnectionMatch.SendAsync("SendMessage", Match.Id.ToString(), userId);

    protected override async Task OnInitializedAsync()  
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            userId = authState.User.FindFirst("sub")?.Value;
        }
        hubConnection = new HubConnectionBuilder()  
            .WithUrl(NavigationManager.ToAbsoluteUri("/allmatcheshub"))  
            .Build();  
        
        await hubConnection.StartAsync();  

        /*hubConnectionMatch = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/matchhub"))
            .Build();

        hubConnectionMatch.On<MatchResponse?>("ReceiveMessage", (match) =>
        {
            Match = match;
            StateHasChanged();  
        });

        await hubConnectionMatch.StartAsync();
        await hubConnectionMatch.SendAsync("JoinGroup", Match.Id.ToString());*/
    }  

    
    private async Task AddPlayer(string team)
    {
       
        StateHasChanged();
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == false)
            {
                ReturnUrl = "~/" + ReturnUrl;
                NavigationManager.NavigateTo($"Identity/Account/Login?returnUrl={ReturnUrl}", forceLoad: true);
                return;
            }
        
            var response = await Http.PostAsync($"match/{Match.Id}/add-me/{team}", null);

            if(response.IsSuccessStatusCode)
            {
                /*if (IsConnectedMatch)
                {
                    await SendMessageMatch();
                }*/
                if (IsConnected)
                {
                    await SendMessage();
                }
                await RefreshMatch.InvokeAsync();
                ToastService.ShowInfo("You have been added to the match.");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
            
        }
        catch (Exception)
        {
            ToastService.ShowError("Something went wrong, please try again later.");
        }
        finally
        {
            
            StateHasChanged();
        }
    }
    
    private async Task RemovePlayer(Guid playerId)
    {
        if (await MessageService.Confirm( "Are you sure you want to delete this player?", "Delete player"))
        {
           
            StateHasChanged();
            try
            {
                var response = await Http.DeleteAsync($"match/{Match.Id}/remove/{playerId}");
                if (response.IsSuccessStatusCode)
                {
                    /*if (IsConnectedMatch)
                    {
                        await SendMessageMatch();
                    }*/
                    if (IsConnected)
                    {
                        await SendMessage();
                    }
                    await RefreshMatch.InvokeAsync();
                    ToastService.ShowInfo("Player removed from the match.");
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(error);
                }
            
            }
            catch (Exception)
            {
                ToastService.ShowError("Something went wrong, please try again later.");
            }
            finally
            {
                StateHasChanged();
            }
        }
    }
    
    private async Task NavigateToPlayerProfile(Guid playerId)
    {
        NavigationManager.NavigateTo($"/player-detail/{playerId}");
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
        //await hubConnectionMatch.DisposeAsync();
    }

}

<style>
    .team-average-elo-info {
        display: flex;
        flex-direction: column;
        font-size: 12px;
        margin-top: 5px;
    }
    
    .odds-positive {
        color: green;
    }
    
    .odds-negative {
        color: red;
    }

    .teams {
        position: relative;
        display: flex;
        justify-content: space-between;
    }
    
    .team {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    
    .vs {
        position: absolute;
        top: 60%; 
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 15px; 
    }
    
    .players-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 10px;
        margin-top: 10px;
    }
    
    .player {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 60px;
        text-align: center;
        font-size: 12px;
    }
    
    .elo,
    .gained-elo {
        width: 100%;
        text-align: center;
    }

    .elo-change-positive {
        color: limegreen;
    }
    
    .elo-change-negative {
        color: red;
    }
    
    .player-avatar, .default-avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
    }
    
    .player-avatar-img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 50%;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
    }
    
    .default-avatar {
        background-color: white;
        border: none;
    }
    
    .player-country {
        position: absolute;
        bottom: -48px; /* Adjust this according to your needs */
        left: 24px; /* Adjust this according to your needs */
        /* Add other styles for the country flag if necessary */
    }
    
    .add-button, .remove-button {
        position: absolute;
        top: -5px;
        right: -5px;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        border: none;
        background-color: white;  
        color: black;
        cursor: pointer;
        font-size: 12px;
        display: flex;
        justify-content: center;
        align-items: center;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
        transition: background-color 0.2s ease;  
    }
    
    .add-button:hover, .remove-button:hover {
        background-color: gray;  
    }
    
    .match-detail-players {
        display: flex;
        flex-direction: column;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
        position: relative;
        padding: 12px;
        border-radius: 10px;        
        background-color: white;
        margin-bottom: 5px;
        max-width: 641px;
    }
</style>