@using EventsManager.Shared.Responses
@using EventsManager.Client.Components.Match.AddResults
@using EventsManager.Shared.Dtos
@using EventsManager.Shared.Requests

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IToastService ToastService


@if (_loading)
{
    <LoadingSpinner></LoadingSpinner>
}

<div class="border match-detail-players">
    <div>
        Players
    </div>
    <div class="teams">

        <div class="team">
            Team 1
            <div class="players-grid">
                @for(var i=0; i<2; i++)
                {
                    if (i < Match.PlayersTeamOne.Count)
                    {
                        var player = Match.PlayersTeamOne[i];
                        <div class="player">
                            @if (player.ImageUrl != null)
                            {
                                <div class="player-avatar">
                                    <img src="@player.ImageUrl" alt="Player avatar" class="player-avatar-img">
                                    @if (player.CanIDeleteIt || Match.RequesterIsTheCreator)
                                    {
                                        <button onclick="@(() => RemovePlayer(player.Id))" class="remove-button">-</button>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="default-avatar">
                                </div>
                            }
                            <p>@player.NickName</p>
                            <p>@player.Elo</p>
                        </div>
                    }
                    else
                    {
                        <div class="player">
                            <div class="default-avatar">
                                @if (!Match.IAmAlreadyRegistered)
                                {
                                    <button onclick="@(() => AddPlayer("Team1"))">+</button>
                                }
                            </div>
                        </div>
                    }
                }
            </div>
            <p style="font-size: 12px">Average Skill: @Match.AverageEloTeamOne</p>
        </div>

        <div class="team">
            Team 2
            <div class="players-grid">
                @for(var i=0; i<2; i++)
                {
                    if (i < Match.PlayersTeamTwo.Count)
                    {
                        var player = Match.PlayersTeamTwo[i];
                        <div class="player">
                            @if (player.ImageUrl != null)
                            {
                                <div class="player-avatar">
                                    <img src="@player.ImageUrl" alt="Player avatar" class="player-avatar-img">
                                   
                                    @if(player.CanIDeleteIt || Match.RequesterIsTheCreator)
                                    {
                                        <button onclick="@(() => RemovePlayer(player.Id))" class="remove-button">-</button>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="default-avatar">
                                </div>
                            }
                            <p>@player.NickName</p>
                            <p>@player.Elo</p>
                        </div>
                    }
                    else
                    {
                        <div class="player">
                            <div class="default-avatar">
                                @if (!Match.IAmAlreadyRegistered)
                                {
                                    <button onclick="@(() => AddPlayer("Team2"))">+</button>
                                }
                            </div>
                        </div>
                    }
                }
            </div>
            <p style="font-size: 12px">Average Skill: @Match.AverageEloTeamTwo</p>
        </div>
    </div>
    @if(Match.RequesterIsTheCreator)
    {
        @if (Match.Sets.Count == 0)
        {
            <button @onclick="ShowAddResultsModal" class="btn btn-primary">Add results</button>
        }
        @if (Match.Sets.Count > 0)
        {
            <button @onclick="ShowEditResultsModal" class="btn btn-primary">Edit results</button>
        }
    }
</div>

<AddResults Sets="_sets" Match="Match" Visible="_addResultsVisible" ConfirmationChanged="ResultAdded"></AddResults>

@code {
    [Parameter]
    public MatchResponse? Match { get; set; }
    
    [Parameter] 
    public EventCallback RefreshMatch { get; set; }

    private List<SetDto>? _sets;

    private bool _loading = false;
    private bool _addResultsVisible = false;
        
    private async Task AddPlayer(string team)
    {
        _loading = true;
        StateHasChanged();
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == false)
            {
                ToastService.ShowError("You must be logged in to register for this match.");
                return;
            }
        
            var response = await Http.PostAsync($"match/{Match.Id}/add-me/{team}", null);

            if(response.IsSuccessStatusCode)
            {
                ToastService.ShowInfo("You have been added to the match.");
                await RefreshMatch.InvokeAsync();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
            
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }
    
    private async Task RemovePlayer(Guid playerId)
    {
        _loading = true;
        StateHasChanged();
        try
        {
            var response = await Http.DeleteAsync($"match/{Match.Id}/remove/{playerId}");
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowInfo("You have been removed from the match.");
                _loading = false;
                await RefreshMatch.InvokeAsync();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
            
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }
    
    private void ShowAddResultsModal()
    {
        _addResultsVisible = true;
    }
        
    private void ShowEditResultsModal()
    {
        _sets = Match.Sets;
        _addResultsVisible = true;
    }

    private async Task ResultAdded(SetMatchScoreRequest? addResultRequest)
    {
        _loading = true;

        if (addResultRequest != null)
        {
            var response = await Http.PostAsJsonAsync($"match/{Match.Id}/set-score", addResultRequest);
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowInfo("Results added.");
                _loading = false;
                await RefreshMatch.InvokeAsync();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }

        _addResultsVisible = false;
        _loading = false;
    }
}

<style>
    .teams {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }
    
    .team {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    
    .players-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 10px;
        margin-top: 10px;
    }
    
    .remove-button {
        position: absolute;
        top: -5px;
        right: -5px;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        border: none;
        background-color: red;
        color: white;
        cursor: pointer;
        font-size: 12px;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    
    .player {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 60px;
        font-size: 12px;
        }
    
    .player-avatar, .default-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }
            
                
    .player-avatar-img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .default-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: grey;
    }
    
    .match-detail-players {
        display: flex;
        flex-direction: column;
    }
</style>