@using EventsManager.Shared.Responses
@using EventsManager.Client.Components.Match.Results
@using EventsManager.Shared.Dtos
@using EventsManager.Shared.Requests

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IToastService ToastService
@inject IMessageService MessageService


@if (_loading)
{
    <LoadingSpinner></LoadingSpinner>
}

<div class="border match-detail-players">
    <div class="teams">
        <div class="team @(Match.ScoreConfirmedTeamOne ? "team-confirmed" : "")">
            Team 1
            <div class="players-grid">
                @for (var i = 0; i < 2; i++)
                {
                    if (i < Match.PlayersTeamOne.Count)
                    {
                        var player = Match.PlayersTeamOne[i];
                        <div class="player">
                            <div class="player-avatar">
                                @if (player.ImageUrl != null)
                                {
                                    <img src="@player.ImageUrl" alt="Player avatar" class="player-avatar-img"/>
                                }
                                else
                                {
                                    <img src="/default-avatar.png" alt="Default avatar" class="player-avatar-img"/>
                                }
                                @if (player.CanIDeleteIt || Match.RequesterIsTheCreator)
                                {
                                    @if (!Match.ScoreConfirmedTeamOne && !Match.ScoreConfirmedTeamTwo)
                                    {
                                        <button onclick="@(() => RemovePlayer(player.Id))" class="remove-button">-</button>
                                    }
                                }
                            </div>
                            <p>@player.NickName</p>
                            <p>@player.Elo</p>
                        </div>
                    }
                    else
                    {
                        <div class="player">
                            <div class="default-avatar">
                                @if (!Match.IAmAlreadyRegistered)
                                {
                                    <button onclick="@(() => AddPlayer("Team1"))" class="add-button">+</button>
                                }
                            </div>
                        </div>
                    }
                }
            </div>
            @if (Match.PlayersTeamOne.Any())
            {
                <p style="font-size: 12px">Average Skill: @Match.AverageEloTeamOne</p>
            }
            @if (Match.ScoreConfirmedTeamOne)
            {
                <p style="font-size: 12px; color: green">Confirmed result</p>
            }
        </div>

        <div class="team @((Match.ScoreConfirmedTeamTwo) ? "team-confirmed" : "")">
            Team 2
            <div class="players-grid">
                @for (var i = 0; i < 2; i++)
                {
                    if (i < Match.PlayersTeamTwo.Count)
                    {
                        var player = Match.PlayersTeamTwo[i];
                        <div class="player">
                            <div class="player-avatar">
                                @if (player.ImageUrl != null)
                                {
                                    <img src="@player.ImageUrl" alt="Player avatar" class="player-avatar-img"/>
                                }
                                else
                                {
                                    <img src="/default-avatar.png" alt="Default avatar" class="player-avatar-img"/>
                                }
                                @if (player.CanIDeleteIt || Match.RequesterIsTheCreator)
                                {
                                    @if (!Match.ScoreConfirmedTeamOne && !Match.ScoreConfirmedTeamTwo)
                                    {
                                        <button onclick="@(() => RemovePlayer(player.Id))" class="remove-button">-</button>
                                    }
                                }
                            </div>
                            <p>@player.NickName</p>
                            <p>@player.Elo</p>
                        </div>
                    }
                    else
                    {
                        <div class="player">
                            <div class="default-avatar">
                                @if (!Match.IAmAlreadyRegistered)
                                {
                                    <button onclick="@(() => AddPlayer("Team2"))" class="add-button">+</button>
                                }
                            </div>
                        </div>
                    }
                }
            </div>
            @if (Match.PlayersTeamTwo.Any())
            {
                <p style="font-size: 12px">Average Skill: @Match.AverageEloTeamTwo</p>
            }
            @if (Match.ScoreConfirmedTeamTwo)
            {
                <p style="font-size: 12px; color: green">Confirmed result</p>

            }
        </div>
    </div>
</div>



@code {
    [Parameter]
    public MatchResponse? Match { get; set; }
    
    [Parameter] 
    public EventCallback RefreshMatch { get; set; }

    private bool _loading = false;
    
    private async Task AddPlayer(string team)
    {
        _loading = true;
        StateHasChanged();
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == false)
            {
                ToastService.ShowError("You must be logged in to register for this match.");
                return;
            }
        
            var response = await Http.PostAsync($"match/{Match.Id}/add-me/{team}", null);

            if(response.IsSuccessStatusCode)
            {
                ToastService.ShowInfo("You have been added to the match.");
                await RefreshMatch.InvokeAsync();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
            
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }
    
    private async Task RemovePlayer(Guid playerId)
    {
        if (await MessageService.Confirm( "Are you sure you want to delete this player?", "Delete player"))
        {
            _loading = true;
            StateHasChanged();
            try
            {
                var response = await Http.DeleteAsync($"match/{Match.Id}/remove/{playerId}");
                if (response.IsSuccessStatusCode)
                {
                    ToastService.ShowInfo("Player removed from the match.");
                    _loading = false;
                    await RefreshMatch.InvokeAsync();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(error);
                }
            
            }
            finally
            {
                _loading = false;
                StateHasChanged();
            }
        }
    }
}

<style>
    .teams {
        display: flex;
        justify-content: space-between;
    }
    
    .team {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    
    .players-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 10px;
        margin-top: 10px;
    }
    
    .player {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 60px;
        font-size: 12px;
    }
    
    .player-avatar, .default-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }
    
    .player-avatar-img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 50%;
    }
    
    .default-avatar {
        background-color: white;
        box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.5);
        border: none;
    }
    
    .add-button, .remove-button {
        position: absolute;
        top: -5px;
        right: -5px;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        border: none;
        background-color: white;  
        color: black;
        cursor: pointer;
        font-size: 12px;
        display: flex;
        justify-content: center;
        align-items: center;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
        transition: background-color 0.2s ease;  
    }
    
    .add-button:hover, .remove-button:hover {
        background-color: gray;  
    }
    
    .match-detail-players {
        display: flex;
        flex-direction: column;
    }
</style>