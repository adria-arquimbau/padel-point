@using EventsManager.Shared.Responses
@using EventsManager.Client.Components.Loaders
@using EventsManager.Shared.Dtos
@using EventsManager.Shared.Enums
@using Microsoft.AspNetCore.SignalR.Client
@using Color = Blazorise.Color

@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationState
@implements IAsyncDisposable

@if (_loading)
{
    for (var i = 0; i < 5; i++)
    {
        <AllMatchesSkeleton></AllMatchesSkeleton>
    }
}

@if (_matches != null)
{
    <div>
        @foreach (var match in _matches)
        {
            <div @onclick="() => GoToTheMatch(match.Id)" class="match-card" style="position: relative;">
                
                 <div style="font-size: 12px; text-align: center;">
                     @match.StartDateTime.ToLongDateString() /
                     @match.StartDateTime.ToShortTimeString() -
                     Duration: @match.Duration h
                 </div>
                 @if (match.Promotions.Any())
                 {
                     <FluentDivider></FluentDivider>
                     <Alert Class="promotion" Color="Color.Info" Visible>
                         <AlertMessage>@match.Promotions.First().Title |</AlertMessage>
                         <AlertDescription>@match.Promotions.First().Description</AlertDescription>
                     </Alert>
                 }
                 <div>
                     
                 </div>
                <FluentDivider></FluentDivider>
                 <div style="width: 60%; float: left;">
                     <p style="font-size: 14px; margin: 0"><b>Average Elo:</b> @match.AverageElo</p>
                     <p style="font-size: 14px; margin: 0">@GetLocationFullName(match.Location)</p>
                 </div>
                 
                 <div class="player-names">
                     <div class="player-names-team">
                         <div class="player-names-team1-title">
                             Team 1
                         </div>
                         <div class="player-names-team1-names">
                             <p style="@GetStyleForPlayerNames(match.PlayersTeamOne.ElementAtOrDefault(0))">@GetPlayerName(match.PlayersTeamOne.ElementAtOrDefault(0))</p>
                             <p style="@GetStyleForPlayerNames(match.PlayersTeamOne.ElementAtOrDefault(1))">@GetPlayerName(match.PlayersTeamOne.ElementAtOrDefault(1))</p>
                         </div>
                     </div>
                     <Divider Style="margin: 0; width: 120px; float: right;"></Divider>
                     <div class="player-names-team">
                         <div class="player-names-team2-title">
                             Team 2
                         </div>
                         <div class="player-names-team2-names">
                             <p style="@GetStyleForPlayerNames(match.PlayersTeamTwo.ElementAtOrDefault(0))">@GetPlayerName(match.PlayersTeamTwo.ElementAtOrDefault(0))</p>
                             <p style="@GetStyleForPlayerNames(match.PlayersTeamTwo.ElementAtOrDefault(1))">@GetPlayerName(match.PlayersTeamTwo.ElementAtOrDefault(1))</p>
                         </div>
                     </div>
                 </div>
                 <div style="clear: both;"></div>
                  @if (match.Finished)
                  {
                      <div class="finished-stamp all-matches-stamp">Finished</div>
                  }
                  @if (IsOpenSlotsState(match))
                  {
                      <div class="searching-stamp all-matches-stamp" style="@GetMinimumLevelColor(match)">@GetMinimumLevel(match.MinimumLevel)</div>
                  }
                  @if (match.PlayersTeamOne.Count == 2 && match.PlayersTeamTwo.Count == 2 && !match.Finished)
                  {
                      <div class="pending-stamp all-matches-stamp">Pending</div>
                  }
            </div>
        }
    </div>
}

@code {
    private List<MatchResponse>? _matches;
    private bool _loading = false;
    private bool _specialPromotion = false;
    private HubConnection hubConnection;  
    
    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        hubConnection = new HubConnectionBuilder()  
            .WithUrl(NavigationManager.ToAbsoluteUri("/allmatcheshub"))  
            .Build();  
        hubConnection.On("ReceiveMessage", async () =>  
        {  
            await GetAllMatches();
            StateHasChanged();  
        });  
  
        await hubConnection.StartAsync();  
        
        await GetAllMatches();
    }
    
    private void CallLoadData()   
    {  
        Task.Run(async () =>  
        {  
            await GetAllMatches();  
        });  
    }  
    
    private void GoToTheMatch(Guid id)
    {
        NavigationManager.NavigateTo($"/match/{id}/detail");
    }
    
    private string GetLocationFullName(MatchLocation matchLocation)
    {
        if (matchLocation == MatchLocation.PadelBaseSalzburg)
        {
            return "Padel Base Salzburg";
        }
        return "";
    }

    private async Task GetAllMatches()
    {
        try
        {
            HttpResponseMessage? response;
            var authState = await AuthenticationState.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                response = await Http.GetAsync("match");
            }
            else
            {
                var http = HttpClientFactory.CreateClient("PadelPoint.ServerAPI.Anonymous");
                response = await http.GetAsync("match");
            }

            if (response.IsSuccessStatusCode)
            {
                _matches = await response.Content.ReadFromJsonAsync<List<MatchResponse>>();
                StateHasChanged(); 
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
        catch (Exception)
        {
            ToastService.ShowError("Something went wrong. Please try again later.");
        }
        finally
        {
            _loading = false;
        }
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    private string GetPlayerName(PlayerDto? playerDto)
    {
        if(playerDto == null)
        {
            return "Open slot";
        }
        
        return playerDto.NickName;
    }

    private string GetStyleForPlayerNames(PlayerDto? player)
    {
        if (player != null)
        {
            return "font-size: 12px; margin: 0";
        }
        return "font-size: 12px; margin: 0; color: grey;";
    }

    private string GetMinimumLevel(int? minimumLevel)
    {
        if (minimumLevel == null)
        {
            return "Open slots";
        }
        return "Open slots at <" + minimumLevel.Value;
    }

    private string GetMinimumLevelColor(MatchResponse matchResponse)
    {
        if (matchResponse.Finished || matchResponse.RequesterElo == null || !IsOpenSlotsState(matchResponse))
        {
            return "";
        }
        if (matchResponse.RequesterElo < matchResponse.MinimumLevel)
        {
            return "color: red; border: 1px solid red";
        }
        
        return "color: rgb(0,119,0);  border: 1px solid rgb(0,119,0);"; 
    }

    private static bool IsOpenSlotsState(MatchResponse match)
    {
        return match.PlayersTeamOne.Count < 2 || match.PlayersTeamTwo.Count < 2;
    }

}

<style>
    .player-names {
        display: flex;
        flex-direction: column;
        align-items: end;
    }
    
    .player-names-team1-title {
        font-size: 8px;
        font-weight: bold;
        color: grey;
        margin-top: auto;
    }
    
    .player-names-team2-title {
        font-size: 8px;
        font-weight: bold;
        color: grey;
    }
    
    .player-names-team1-names {
        display: flex;
        flex-direction: column;
        align-items: end;
    }
    
    .player-names-team {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        width: 120px;
    }
    
    .player-names-team2-names{
        display: flex;
        flex-direction: column;
        align-items: end;
    }
        
    .match-card {
        border-radius: 8px;
        padding: 10px;
        background-color: white;
        margin-bottom: 10px;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
        max-width: 641px;
    }   
    
    .all-matches-stamp{
        width: 180px;
        padding-right: 5px;
        padding-left: 5px;
        height: 20px;
        background-color: transparent;
        border-radius: 8px;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
        display: flex;
        align-items: center; 
        justify-content: center;
        overflow: hidden;
        font-weight: bold;
        font-size: 14px;
}
    
    .finished-stamp {
        color: rgb(79,79,79);
        border: 1px solid rgb(79,79,79);
    }
    
    .pending-stamp {
        color: #b77f0a;
        border: 1px solid #b77f0a;
    }    
    
    .promotion {
        font-size: 12px;
        margin: 0px;
        padding: 0 0 5px 5px;
    }
</style>
