@using EventsManager.Shared.Responses
@using EventsManager.Client.Components.Loaders
@using Color = Blazorise.Color

@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject IToastService ToastService
@inject NavigationManager NavigationManager

@if (_loading)
{
    for (var i = 0; i < 5; i++)
    {
        <AllMatchesSkeleton></AllMatchesSkeleton>
    }
}

@if (_matches != null)
{
    <div>
        @foreach (var match in _matches)
        {
            <div @onclick="() => GoToTheMatch(match.Id)" class="border match-card" style="position: relative;">
                 @if (match.Finished)
                 {
                     <div class="finished-stamp">Finished</div>
                 }
                 @if (match.PlayersCount < 4)
                 {
                     <div class="searching-stamp">Open slots</div>
                 }
                 @if (match.PlayersCount == 4 && !match.Finished)
                 {
                     <div class="pending-stamp">Pending</div>
                 }
                 <div style="font-size: 12px; text-align: center;">
                     @match.StartDateTime.ToLongDateString() /
                     @match.StartDateTime.ToShortTimeString() -
                     Duration: @match.Duration h
                 </div>
                 @if (match.Promotions.Any())
                 {
                     <FluentDivider></FluentDivider>
                     <Alert Class="promotion" Color="Color.Info" Visible>
                         <AlertMessage>@match.Promotions.First().Title |</AlertMessage>
                         <AlertDescription>@match.Promotions.First().Description</AlertDescription>
                     </Alert>
                 }
                 <div>
                     
                 </div>
                <FluentDivider></FluentDivider>
                <div style="width: 60%; float: left; margin-bottom: 20px;">
                    <p style="font-size: 14px"><b>Players:</b> @match.PlayersCount / 4</p>
                    <p style="font-size: 14px"><b>Average Elo:</b> @match.AverageElo</p>
                </div>
                <div style="width: 40%; float: right; text-align: right;">
                    <p style="font-size: 14px; margin-bottom: 0;"><b></b></p>
                    @foreach (var player in match.PlayersNames)
                    {
                        <p style="font-size: 12px; margin: 0;">@player</p>
                    }
                </div>
                <div style="clear: both;"></div>
            </div>
        }
    </div>
}

@code {
    private List<MatchResponse>? _matches;
    private bool _loading = false;
    private bool _specialPromotion = false;
    
    protected override async Task OnInitializedAsync()
    {
        await GetAllMatches();
    }
    
    private void GoToTheMatch(Guid id)
    {
        NavigationManager.NavigateTo($"/match/{id}/detail");
    }

    private async Task GetAllMatches()
    {
        try
        {
            _loading = true;
            var http = HttpClientFactory.CreateClient("PadelPoint.ServerAPI.Anonymous");
            var response = await http.GetAsync("match");

            if (response.IsSuccessStatusCode)
            {
                _matches = await response.Content.ReadFromJsonAsync<List<MatchResponse>>();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
        catch (Exception)
        {
            ToastService.ShowError("Something went wrong. Please try again later.");
        }
        finally
        {
            _loading = false;
        }
    }
}

<style>
    .border {
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 10px;
        margin: 10px;
        background-color: white;
    }
        
    .match-card {
        margin-bottom: 15px;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
    }   
    
    .finished-stamp {
        position: absolute;
        bottom: 10px;
        right: 10px;
        width: 100px;
        height: 20px;
        background-color: transparent;
        color: limegreen;
        border: 2px solid limegreen;
        display: flex;
        align-items: center; /* center text vertically */
        justify-content: center; /* center text horizontally */
        overflow: hidden;
        font-weight: bold;
        font-size: 14px;
    }
    
    .searching-stamp {
        position: absolute;
        bottom: 10px;
        right: 10px;
        width: 100px;
        height: 20px;
        background-color: transparent;
        color: darkblue;
        border: 2px solid darkblue;
        display: flex;
        align-items: center; /* center text vertically */
        justify-content: center; /* center text horizontally */
        overflow: hidden;
        font-weight: bold;
        font-size: 14px;
    }
    
    .pending-stamp {
        position: absolute;
        bottom: 10px;
        right: 10px;
        width: 100px;
        height: 20px;
        background-color: transparent;
        color: #ffaf00;
        border: 2px solid #ffaf00;
        display: flex;
        align-items: center; /* center text vertically */
        justify-content: center; /* center text horizontally */
        overflow: hidden;
        font-weight: bold;
        font-size: 14px;
    }    
    
    .promotion {
        font-size: 12px;
        margin: 0px;
        padding: 0 0 5px 5px;
    }
</style>
