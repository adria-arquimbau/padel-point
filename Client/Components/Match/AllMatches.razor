@using EventsManager.Shared.Responses

@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject IToastService ToastService

@if (_matches == null)
{
    <LoadingSpinner></LoadingSpinner>
}
else
{
    <div>
        @foreach (var match in _matches)
        {
            <div class="border match-card" style="position: relative;">
                 @if (match.Finished)
                 {
                     <div class="finished-stamp">Finished</div>
                 }
                 @if (match.PlayersCount < 4)
                 {
                     <div class="searching-stamp">Open slots</div>
                 }
                <div style="font-size: 12px; text-align: center;">
                    @match.StartDateTime.ToLocalTime().ToLongDateString() /
                    @match.StartDateTime.ToLocalTime().ToShortTimeString() -
                    @match.EndDateTime.ToLocalTime().ToShortTimeString()
                </div>
                <FluentDivider></FluentDivider>
                <div style="width: 60%; float: left; margin-bottom: 20px;">
                    <p style="font-size: 14px"><b>Players:</b> @match.PlayersCount / 4</p>
                    <p style="font-size: 14px"><b>Location:</b> @match.Location</p>
                    <p style="font-size: 14px"><b>Average Elo:</b> @match.AverageElo</p>
                </div>
                <div style="width: 40%; float: right; text-align: right;">
                    <p style="font-size: 14px; margin-bottom: 0;"><b></b></p>
                    @foreach (var player in match.PlayersNames)
                    {
                        <p style="font-size: 12px; margin: 0;">@player</p>
                    }
                </div>
                <div style="position: absolute; bottom: 10px; left: 10px;">
                    <a href="/match/@match.Id/detail">View Details</a>
                </div>
                <div style="clear: both;"></div>
            </div>
        }
    </div>
}

@code {
    private List<MatchResponse>? _matches;

    protected override async Task OnInitializedAsync()
    {
        await GetAllMatches();
    }

    private async Task GetAllMatches()
    {
        var http = HttpClientFactory.CreateClient("PadelPoint.ServerAPI.Anonymous");
        var response = await http.GetAsync("match");

        if (response.IsSuccessStatusCode)
        {
            _matches = await response.Content.ReadFromJsonAsync<List<MatchResponse>>();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            ToastService.ShowError(error);
        }
    }
}

<style>
    .border {
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 10px;
        margin: 10px;
        background-color: white;
    }
        
    .match-card {
        margin-bottom: 15px;
    }   
    
    .finished-stamp {
        position: absolute;
        bottom: 10px;
        right: 10px;
        width: 100px;
        height: 20px;
        background-color: transparent;
        color: limegreen;
        border: 2px solid limegreen;
        display: flex;
        align-items: center; /* center text vertically */
        justify-content: center; /* center text horizontally */
        overflow: hidden;
        font-weight: bold;
        font-size: 14px;
    }
    
    .searching-stamp {
        position: absolute;
        bottom: 10px;
        right: 10px;
        width: 100px;
        height: 20px;
        background-color: transparent;
        color: darkblue;
        border: 2px solid darkblue;
        display: flex;
        align-items: center; /* center text vertically */
        justify-content: center; /* center text horizontally */
        overflow: hidden;
        font-weight: bold;
        font-size: 14px;
    }

</style>
