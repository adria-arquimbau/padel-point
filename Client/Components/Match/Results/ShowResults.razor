@using EventsManager.Shared.Responses
@using EventsManager.Shared.Dtos
@using EventsManager.Shared.Requests
@using EventsManager.Client.Components.Modals
@using System.Net
@using EventsManager.Shared

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IToastService ToastService

@if (_loading)
{
    <LoadingSpinner></LoadingSpinner>
}

<div class="match-set-results border info">
    @if (!Match.ScoreConfirmedTeamOne || !Match.ScoreConfirmedTeamTwo)
    {
        @if (Match.Sets.Count > 1 && !MyTeamHaveConfirmedResult())
        {
            <div class="confirm-buttons">
                <button @onclick="ShowConfirmResultsModal" class="confirm-button">Confirm @Match.MyTeam result</button>
            </div>
        }
        @if (MyTeamHaveConfirmedResult())
        {
            <div class="confirm-buttons">
                <p class="confirm-button" style="font-size: 12px">You have confirmed result.</p>
                <button @onclick="ShowDeleteConfirmationResultsModal" class="confirm-button">Delete confirmation</button>
            </div>
        }
    }

    @if (Match?.Sets?.Count > 0)
    {
        <table>
            <thead>
            <tr>
                <th>Set</th>
                <th>Team 1</th>
                <th>Team 2</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var set in Match.Sets)
            {
                <tr>
                    <td>@set.SetNumber</td>
                    <td>@set.Team1Score</td>
                    <td>@set.Team2Score</td>
                </tr>
            }
            </tbody>
        </table>
    }
    @if (Match.RequesterIsTheCreator)
    {
        @if (!Match.ScoreConfirmedTeamOne || !Match.ScoreConfirmedTeamTwo)
        {
            @if (Match.Sets.Count == 0 && Match.PlayersCount == 4)
            {
                <div class="button-container">
                    <button style="font-size: 15px" @onclick="ShowAddResultsModal" class="btn btn-primary">Add results</button>
                </div>
            }
            @if (Match.Sets.Count > 0)
            {
                <div class="button-container">
                    <button style="font-size: 15px" @onclick="ShowEditResultsModal" class="btn btn-primary btn-80">Edit results</button>
                    <button style="font-size: 15px" @onclick="ShowDeleteScoreModal" class="btn btn-danger btn-20">Delete</button>
                </div>
            }
        }
    }
</div>

<AddResults Sets="Match.Sets" Match="Match" Visible="_addResultsVisible" ConfirmationChanged="ResultAdded"></AddResults>
<ConfirmationModal ConfirmationChanged="ConfirmResult" Visible="_confirmResultVisible" Title="Confirm result" Message="Are you sure you want to confirm the result?"></ConfirmationModal>
<ConfirmationModal ConfirmationChanged="DeleteConfirmResult" Visible="_deleteConfirmResultVisible" Title="Delete confirmed result" Message="Are you sure you want to delete the confirmed the result?"></ConfirmationModal>
<ConfirmationModal ConfirmationChanged="DeleteScoreResult" Visible="_deleteScoreModalVisible" Title="Delete score" Message="Are you sure you want to delete the score?"></ConfirmationModal>

@code {
    [Parameter]
    public MatchResponse? Match { get; set; }
    
    [Parameter] 
    public EventCallback RefreshMatch { get; set; }

    private bool _loading = false;
    private bool _addResultsVisible = false;
    private bool _confirmResultVisible = false;
    private bool _deleteScoreModalVisible = false;
    private bool _deleteConfirmResultVisible = false;

    private bool MyTeamHaveConfirmedResult()
    {
        if (Match.MyTeam == Team.Team1 && Match.ScoreConfirmedTeamOne)
        {
            return true;
        }
        if (Match.MyTeam == Team.Team2 && Match.ScoreConfirmedTeamTwo)
        {
            return true;
        }
        
        return false;
    }
    
    private void ShowConfirmResultsModal()
    {
        _confirmResultVisible = true;
    }
    
    private void ShowDeleteConfirmationResultsModal()
    {
        _deleteConfirmResultVisible = true;
    }
    
    private void ShowDeleteScoreModal()
    {
        _deleteScoreModalVisible = true;
    }
    
    private void ShowAddResultsModal()
    {
        _addResultsVisible = true;
    }
        
    private void ShowEditResultsModal()
    {
        _addResultsVisible = true;
    }
    
    private async Task ConfirmResult(bool confirm)
    {
        _loading = true;

        if (confirm)
        {
            var response = await Http.PostAsync($"match/{Match.Id}/confirm-result/{true}", null);
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowInfo("Confirmed result.");
                _loading = false;
                await RefreshMatch.InvokeAsync();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
        
        _confirmResultVisible = false;
        _loading = false;
    }
    
    private async Task DeleteConfirmResult(bool confirm)
    {
        _loading = true;    

        if (confirm)
        {
            var response = await Http.PostAsync($"match/{Match.Id}/confirm-result/{false}", null);
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowInfo("Deleted confirmed result.");
                _loading = false;
                await RefreshMatch.InvokeAsync();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
        
        _loading = false;
    }
    
    private async Task DeleteScoreResult(bool confirm)
    {
        _loading = true;

        if (confirm)
        {
            try
            {
                var response = await Http.DeleteAsync($"match/{Match.Id}/remove-score");

                if (response.IsSuccessStatusCode)
                {
                    ToastService.ShowInfo("Results removed.");
                    await RefreshMatch.InvokeAsync();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(error);
                }
            }
            catch(Exception)
            {
                ToastService.ShowError("Something went wrong, please try again later.");
            }
        }
        _loading = false;
        _deleteScoreModalVisible = false;
    }
    
    private async Task ResultAdded(SetMatchScoreRequest? addResultRequest)
    {
        _loading = true;

        if (addResultRequest != null)
        {
            var response = await Http.PostAsJsonAsync($"match/{Match.Id}/set-score", addResultRequest);
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowInfo("Results added.");
                _loading = false;
                await RefreshMatch.InvokeAsync();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }

        _addResultsVisible = false;
        _loading = false;
    }
    
    private async Task RemoveResults()
    {
        _loading = true;

        try
        {
            var response = await Http.DeleteAsync($"match/{Match.Id}/remove-score");

            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowInfo("Results removed.");
                await RefreshMatch.InvokeAsync();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
        finally
        {
            _loading = false;
        }
    }
}

<style>
    .border{
        margin: 12px;
        padding: 12px;
        border: 2px solid grey;
        border-radius: 10px;   
        display: flex;  
        background-color: white;
    }
    
    .confirm-buttons{
        font-size: 12px;
        display: flex;
        align-content: space-between;
    }
    
    .confirm-button{
        margin: 5px;
    }
    
    .match-set-results {
        flex-direction: column;
    }
    
    table th, table td {
        text-align: center;
    }     
    
    .button-container {
        display: flex;
    }
    
    .btn-80 {
        width: 70%;
    }
    
    .btn-20 {
        width: 30%;
    }
    
    .btn{
        margin: 10px 5px 5px;
    }
</style>
