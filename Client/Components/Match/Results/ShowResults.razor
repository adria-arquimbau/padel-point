@using EventsManager.Shared.Responses
@using EventsManager.Shared.Dtos
@using EventsManager.Shared.Requests
@using EventsManager.Client.Components.Modals
@using System.Net
@using EventsManager.Shared
@using EventsManager.Shared.Enums
@using Color = Blazorise.Color
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IToastService ToastService
@inject IMessageService MessageService

@if (_loading)
{
    <LoadingSpinner></LoadingSpinner>
}
@if (Match is {RequesterIsAPlayer: false })
{
    <div class="match-set-results info">
        <ShowSets Match="Match"></ShowSets>
    </div>
}
@if (Match is {RequesterIsAPlayer: true })
{
    <div class="match-set-results info">
        <AuthorizeView>
            <Authorized>
                @if (!Match.ScoreConfirmedTeamOne || !Match.ScoreConfirmedTeamTwo)
                {
                    @if (Match.Sets is {Count: > 1 } && !MyTeamHaveConfirmedResult() && Match.RequesterIsAPlayer)
                    {
                        <div class="confirm-buttons">
                            <Button Style="font-size: 12px" Size="Size.Small" Color="Color.Success" @onclick="ConfirmResult" Outline>Confirm result</Button>
                        </div>
                        <Divider/>
                    }
                    @if (MyTeamHaveConfirmedResult())
                    {
                        <div class="confirm-buttons">
                            <p class="confirm-button" style="font-size: 12px">You have confirmed result.</p>
                            <Button Style="font-size: 12px" Size="Size.Small" Color="Color.Danger" @onclick="DeleteConfirmResult" Outline>Delete confirmation</Button>
                        </div>
                        <Divider/>
                    }
                }
            </Authorized>
        </AuthorizeView>
        
        <ShowSets Match="Match"></ShowSets>
        
        @if (Match is {Finished: false, RequesterIsAPlayer: true })
        {
            @if (Match.Sets is {Count: 0 } && Match.PlayersCount == 4)
            {
                <div class="button-container">
                    <Button Size="Size.Small" Color="Color.Primary" Style="font-size: 15px" Clicked="ShowAddResultsModal" Outline>Add results</Button>
                </div>
            }
            @if (Match.Sets is {Count: > 0 })
            {
                <div class="button-container">
                    <Button Style="font-size: 12px" Size="Size.Small" Color="Color.Primary" Clicked="ShowEditResultsModal" Outline>Edit score</Button>
                    <Button Style="font-size: 12px" Size="Size.Small" Color="Color.Danger" Clicked="DeleteScoreResult" Outline>Delete score</Button>
                </div>
            }
        }
    </div>
}

<AddResults Sets="Match?.Sets" Match="Match" Visible="_addResultsVisible" ConfirmationChanged="ResultAdded"></AddResults>
<ConfirmationModal ConfirmationChanged="ConfirmResult" Visible="_confirmResultVisible" Title="Confirm result" Message="Are you sure you want to confirm the result?"></ConfirmationModal>

@code {
    [Parameter]
    public MatchResponse? Match { get; set; }
    
    [Parameter] 
    public EventCallback RefreshMatch { get; set; }

    private bool _loading = false;
    private bool _addResultsVisible = false;
    private bool _confirmResultVisible = false;
    private bool _deleteScoreModalVisible = false;
    private bool _deleteConfirmResultVisible = false;

    private bool MyTeamHaveConfirmedResult()
    {
        if (Match?.MyTeam == Team.Team1 && Match.ScoreConfirmedTeamOne)
        {
            return true;
        }
        if (Match?.MyTeam == Team.Team2 && Match.ScoreConfirmedTeamTwo)
        {
            return true;
        }
        
        return false;
    }
    
    private void ShowConfirmResultsModal()
    {
        _confirmResultVisible = true;
    }
    
    private void ShowAddResultsModal()
    {
        _addResultsVisible = true;
    }
        
    private void ShowEditResultsModal()
    {
        _addResultsVisible = true;
    }
    
    private async Task ConfirmResult()
    {
        _loading = true;

        if (await MessageService.Confirm( "Are you sure you want to confirm the result?", "Confirm result"))
        {
            try
            {
                var response = await Http.PostAsync($"match/{Match?.Id}/confirm-result/{true}", null);
                if (response.IsSuccessStatusCode)
                {
                    ToastService.ShowInfo("Confirmed result.");
                    _loading = false;
                    await RefreshMatch.InvokeAsync();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(error);
                }
            }
            catch (Exception)
            {
                ToastService.ShowError("Something went wrong, please try again later.");
            }
        }
        
        _confirmResultVisible = false;
        _loading = false;
    }
    
    private async Task DeleteConfirmResult()
    {
        _loading = true;    

        if (await MessageService.Confirm( "Are you sure you want to delete your team result confirmation?", "Delete team result confirmation"))
        {
            try
            {
                var response = await Http.PostAsync($"match/{Match?.Id}/confirm-result/{false}", null);
                if (response.IsSuccessStatusCode)
                {
                    ToastService.ShowInfo("Deleted confirmed result.");
                    _loading = false;
                    await RefreshMatch.InvokeAsync();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(error);
                }
            }
            catch (Exception)
            {
                ToastService.ShowError("Something went wrong, please try again later.");
            }
        }
        
        _loading = false;
    }
    
    private async Task DeleteScoreResult()
    {
        _loading = true;

        if (await MessageService.Confirm( "Are you sure you want to delete the match results?", "Delete match results"))
        {
            try
            {
                var response = await Http.DeleteAsync($"match/{Match?.Id}/remove-score");

                if (response.IsSuccessStatusCode)
                {
                    ToastService.ShowInfo("Results removed.");
                    await RefreshMatch.InvokeAsync();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(error);
                }
            }
            catch(Exception)
            {
                ToastService.ShowError("Something went wrong, please try again later.");
            }
        }
        _loading = false;
        _deleteScoreModalVisible = false;
    }
    
    private async Task ResultAdded(SetMatchScoreRequest? addResultRequest)
    {
        _loading = true;

        if (addResultRequest != null)
        {
            try
            {
                var response = await Http.PostAsJsonAsync($"match/{Match?.Id}/set-score", addResultRequest);
                if (response.IsSuccessStatusCode)
                {
                    ToastService.ShowInfo("Results added.");
                    _loading = false;
                    await RefreshMatch.InvokeAsync();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(error);
                }
            }
            catch (Exception)
            {
                ToastService.ShowError("Something went wrong, please try again later.");
            }
        }

        _addResultsVisible = false;
        _loading = false;
    }
    
    private async Task RemoveResults()
    {
        _loading = true;

        try
        {
            var response = await Http.DeleteAsync($"match/{Match?.Id}/remove-score");

            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowInfo("Results removed.");
                await RefreshMatch.InvokeAsync();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
        catch(Exception)
        {
            ToastService.ShowError("Something went wrong, please try again later.");
        }
        
        _loading = false;
    }
}

<style>
    .border{
       
    }
    
    .green {
        color: green;
    }
    
    .red {
        color: red;
    }
    
    .confirm-buttons{
        font-size: 12px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .confirm-button{
        margin: 5px;
    }
    
    .match-set-results {
    max-width: 641px;
        flex-direction: column;
        padding: 12px;
        border-radius: 10px;   
        display: flex;  
        background-color: white;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
    }
    
    table th, table td {
        text-align: center;
    }     
    
    .button-container {
        display: flex;
        justify-content: center;
        align-items: center;
    }
    
    .btn{
        margin: 10px 5px 5px;
    }
</style>
