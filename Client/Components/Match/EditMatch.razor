@using EventsManager.Shared.Requests
@using EventsManager.Shared.Responses
@inject HttpClient Http
@inject IToastService ToastService

<div class="modal" tabindex="-1" style="display: @(Visible ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit match</h5>
                <button type="button" class="btn-close" @onclick="Cancel"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="_editMatchRequest" OnValidSubmit="Confirm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                
                    <InputDate id="startDateTime" @bind-Value="_editMatchRequest.StartDateTime" class="form-control" placeholder="Start Date and Time"/>
                    <InputDate id="endDateTime" @bind-Value="_editMatchRequest.EndDateTime" class="form-control" placeholder="End Date and Time"/>
                    <InputText id="location" @bind-Value="_editMatchRequest.Location" class="form-control" placeholder="Location"/>
                    <InputCheckbox id="isPrivate" @bind-Value="_editMatchRequest.IsPrivate"/> Is Private?
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="Confirm">Save</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public bool Visible { get; set; }
    
    CreateMatchRequest _editMatchRequest = new();

    [Parameter]
    public MatchResponse? Match { get; set; }
        
    [Parameter]
    public EventCallback<CreateMatchRequest?> ConfirmationChanged { get; set; }
    
    protected override void OnInitialized()
    {
        if (Match != null)
        {   
            _editMatchRequest.StartDateTime = Match.StartDateTime;
            _editMatchRequest.EndDateTime = Match.EndDateTime;
            _editMatchRequest.Location = Match.Location;
            _editMatchRequest.IsPrivate = Match.IsPrivate;
        }
    }

    private async Task Confirm()
    {
        Visible = false;
        await ConfirmationChanged.InvokeAsync(_editMatchRequest);
    }

    private async Task Cancel()
    {
        Visible = false;
        await ConfirmationChanged.InvokeAsync(null);
    }
}
