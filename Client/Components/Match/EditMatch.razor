@using EventsManager.Shared.Requests
@using EventsManager.Shared.Responses
@inject HttpClient Http
@inject IToastService ToastService

@if (IsModalVisible)
{
    <div class="modal" style="display:block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Match</h5>
                    <button type="button" class="close" @onclick="CloseModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="_editMatchRequest" OnValidSubmit="EditMatchAction">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <InputDate id="startDateTime" @bind-Value="_editMatchRequest.StartDateTime" class="form-control" placeholder="Start Date and Time"/>
                        <InputDate id="endDateTime" @bind-Value="_editMatchRequest.EndDateTime" class="form-control" placeholder="End Date and Time"/>
                        <InputText id="location" @bind-Value="_editMatchRequest.Location" class="form-control" placeholder="Location"/>
                        <InputCheckbox id="isPrivate" @bind-Value="_editMatchRequest.IsPrivate"/> Is Private?

                        <button type="submit" class="btn btn-primary">Save changes</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsModalVisible { get; set; }
    
    CreateMatchRequest _editMatchRequest = new();
    
    [Parameter]
    public MatchResponse? Match { get; set; }
    
    [Parameter]
    public EventCallback OnClose { get; set; }
    
    protected override void OnInitialized()
    {
        _editMatchRequest.StartDateTime = Match.StartDateTime;
        _editMatchRequest.EndDateTime = Match.EndDateTime;
        _editMatchRequest.Location = Match.Location;
        _editMatchRequest.IsPrivate = Match.IsPrivate;
    }
    
    async Task EditMatchAction()
    {
        var response = await Http.PutAsJsonAsync($"match/{Match.Id}", _editMatchRequest);

        if(response.IsSuccessStatusCode)
        {
            ToastService.ShowInfo("Match has been updated successfully.");
            IsModalVisible = false;
            CloseModal();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            ToastService.ShowError(error);
            IsModalVisible = false;
        }
    }

    void CloseModal()
    {
        IsModalVisible = false;
        OnClose.InvokeAsync();
    }
}
