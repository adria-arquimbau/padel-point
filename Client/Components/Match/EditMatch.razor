@using EventsManager.Shared.Requests
@using EventsManager.Shared.Responses
@using EventsManager.Shared.Enums
@inject HttpClient Http
@inject IToastService ToastService

<div class="modal background" tabindex="-1" style="display: @(Visible ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit match</h5>
                <button type="button" class="btn-close" @onclick="Cancel"></button>
            </div>
            <div class="modal-body">
                <form id="editForm" onsubmit="confirm">
                    <div class="form-group">
                        <label>Select the date and starting time</label>
                        <DateEdit TValue="DateTime" @bind-Date="@_editMatchRequest.StartDate" InputMode="DateInputMode.DateTime"/>    
                    </div>
                    <div class="form-group">
                        <Switch @bind-Checked="@_requiredSpecificLevel" TValue="bool">Required specific level</Switch>
                    </div>
                    @if (_requiredSpecificLevel)
                    {
                        <div class="form-group">
                            <label>Minimum level</label>
                            <NumericPicker @bind-Value="@_editMatchRequest.MinimumLevel" ModifyValueOnWheel WheelOn="NumericWheelOn.Hover" />
                        </div>
                    }
                    <div class="form-group">
                        <label>Duration</label>
                        <Select @bind-SelectedValue="@_durationSelect" TValue="int">
                            <SelectItem Value="1">1 hour</SelectItem>
                            <SelectItem Value="2">1,5 hours</SelectItem>
                            <SelectItem Value="3">2 hours</SelectItem>
                            <SelectItem Value="4">2,5 hours</SelectItem>
                            <SelectItem Value="5">3 hours</SelectItem>
                        </Select>
                    </div>
                    <div class="form-group">
                        <label>Location</label>
                        <Select @bind-SelectedValue="@_editMatchRequest.Location" TValue="MatchLocation">
                            <SelectItem Value="MatchLocation.PadelBaseSalzburg">Padel Base Salzburg</SelectItem>
                            <SelectItem Value="MatchLocation.None">-</SelectItem>
                        </Select>
                    </div>
                    <div class="form-group form-check">
                        <Switch TValue="bool" @bind-Checked="@_editMatchRequest.IsPrivate">Is Private?</Switch>
                    </div>
                </form>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="Confirm">Save</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public bool Visible { get; set; }
    
    CreateMatchRequest _editMatchRequest = new();
    
    private int _durationSelect = 1;
    
    private bool _requiredSpecificLevel;

    [Parameter]
    public MatchResponse? Match { get; set; }
        
    [Parameter]
    public EventCallback<CreateMatchRequest?> ConfirmationChanged { get; set; }
    
    protected override void OnInitialized()
    {
        if (Match != null)
        {   
            _editMatchRequest.StartDate = Match.StartDateTime;
            _editMatchRequest.IsPrivate = Match.IsPrivate;
            _editMatchRequest.Location = Match.Location;
            _editMatchRequest.MinimumLevel = Match.MinimumLevel == null ? null : Match.MinimumLevel.Value;
            _requiredSpecificLevel = Match.MinimumLevel != null;
        }
        var duration = Match?.Duration switch
        {
            1 => 1,
            1.5 => 2,
            2 => 3,
            2.5 => 4,
            3 => 5,
            _ => 1
        };
        _durationSelect = duration;
    }

    private async Task Confirm()
    {
        Visible = false;
        
        var durationInHours = _durationSelect switch
        {
            1 => 1,
            2 => 1.5,
            3 => 2,
            4 => 2.5,
            5 => 3,
            _ => 1
        };
        
        _editMatchRequest.Duration = durationInHours;
        _editMatchRequest.MinimumLevel = _requiredSpecificLevel ? _editMatchRequest.MinimumLevel : null;
        await ConfirmationChanged.InvokeAsync(_editMatchRequest);
    }

    private async Task Cancel()
    {
        Visible = false;
        await ConfirmationChanged.InvokeAsync(null);
    }
}
<style>
    .background{
        background-color: rgba(0, 0, 0, 0.5);
    }
</style>
