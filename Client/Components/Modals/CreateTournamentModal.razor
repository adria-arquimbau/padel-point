@using Color = Blazorise.Color
@using EventsManager.Shared.Requests
@using EventsManager.Shared.Responses
@using EventsManager.Shared.Enums

@inject HttpClient Http
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationState


<Modal @ref="_modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Create a tournament</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Name</FieldLabel>
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <TextEdit @bind-Text="@_name" Placeholder="Enter tournament name...">
                        <Feedback>
                            <ValidationNone>Please enter the name.</ValidationNone>
                            <ValidationSuccess>Name is good.</ValidationSuccess>
                            <ValidationError>Enter valid name!</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Validation>
            </Field>
            <Field>
                <FieldLabel>Description</FieldLabel>
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <TextEdit @bind-Text="@_description" Placeholder="Enter tournament description...">
                        <Feedback>
                            <ValidationNone>Please enter the name.</ValidationNone>
                            <ValidationSuccess>Description is good.</ValidationSuccess>
                            <ValidationError>Enter valid name!</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Validation>
            </Field>
            <Field>
                <FieldLabel>Start date and time</FieldLabel>
                <DateEdit TValue="DateTime" @bind-Date="@_startDate" InputMode="DateInputMode.DateTime"/>
            </Field>
            <Field>
                <FieldLabel>Location</FieldLabel>
                <Select @bind-SelectedValue="@_location" TValue="MatchLocation">
                    <SelectItem Value="MatchLocation.PadelBaseSalzburg">Padel Base Salzburg</SelectItem>
                    <SelectItem Value="MatchLocation.PuntoDeOroClub">Punto de Oro Club</SelectItem>
                    <SelectItem Value="MatchLocation.None">-</SelectItem>
                </Select>
            </Field>
            <Field>
                <FieldLabel>Max teams</FieldLabel>
                <Select @bind-SelectedValue="@_maxTeams" TValue="MaxTeams">
                    <SelectItem Value="MaxTeams.Eight">8</SelectItem>
                    <SelectItem Value="MaxTeams.Eight">12</SelectItem>
                    <SelectItem Value="MaxTeams.Sixteen">16</SelectItem>
                </Select>
            </Field>
            <Field>
                <FieldLabel>Round robin phase groups</FieldLabel>
                <Select @bind-SelectedValue="@_roundRobinPhaseGroups" TValue="int">
                    <SelectItem Value="1">1</SelectItem>
                    <SelectItem Value="2">2</SelectItem>
                    <SelectItem Value="3">3</SelectItem>
                    <SelectItem Value="4">4</SelectItem>
                </Select>
            </Field>
            <Field>
                <FieldLabel>Round robin type</FieldLabel>
                <Select @bind-SelectedValue="@_roundRobinType" TValue="RoundRobinType">
                    <SelectItem Value="RoundRobinType.Random">Random groups</SelectItem>
                    <SelectItem Value="RoundRobinType.BestPlayersLeadGroups">Best players lead groups</SelectItem>
                </Select>
            </Field>
            <div class="form-group">
                <Switch @bind-Checked="@_openRegistrations" TValue="bool">Open registrations</Switch>
            </div>
             <div class="form-group">
                <Switch @bind-Checked="@_isFree" TValue="bool">Is free</Switch>
            </div>
            @if (!_isFree)
            {
                <div class="form-group">
                    <label>Price</label>
                    <NumericPicker @bind-Value="@_price" ModifyValueOnWheel WheelOn="NumericWheelOn.Hover"/>
                </div>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            <Button Color="Color.Success" Clicked="@CreateTournament">Create</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public bool Show { get; set; }
    
    [Parameter] 
    public EventCallback DontShow { get; set; }
        
    private DateTime _startDate = DateTime.Now;
    private DateTime _startTime = DateTime.Now;
    private string? _name = null;
    private string? _description = null;
    private MatchLocation _location = MatchLocation.PadelBaseSalzburg;
    private MaxTeams _maxTeams;
    private int _roundRobinPhaseGroups = 1;
    private RoundRobinType _roundRobinType = RoundRobinType.Random;
    
    private bool _isFree = true;
    private bool _openRegistrations;
    private decimal _price;

    protected override async Task OnParametersSetAsync()
    {
        if (Show)
        {
            await ShowModal();
        }
        else
        {
            await HideModal();
        }
    }
    
    private async Task CreateTournament()
    {
        var tournamentRequest = new TournamentRequest
        {
            Name = _name,
            Description = _description,
            StartDate = _startDate,
            Location = _location,
            MaxTeams = _maxTeams,
            OpenRegistrations = _openRegistrations,
            Price = _isFree ? 0 : _price,
            RoundRobinPhaseGroups = _roundRobinPhaseGroups,
            RoundRobinType = _roundRobinType
        };
        
        try
        {
            var response = await Http.PostAsJsonAsync("tournament", tournamentRequest);

            if (response.IsSuccessStatusCode)
            {
                await HideModal();
                var createdTournament = await response.Content.ReadFromJsonAsync<CreateTournamentResponse>();
                NavigationManager.NavigateTo($"/tournament/{createdTournament.Id}/detail");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
        catch (Exception)
        {
            ToastService.ShowError("Something went wrong. Please try again later.");
        }
        finally
        {
            
        }
    }
    
    private Modal _modalRef = new();

    private Task ShowModal()
    {
        return _modalRef.Show();
    }

    private Task HideModal()
    {
        return _modalRef.Hide();
    }
}
