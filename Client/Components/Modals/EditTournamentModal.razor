@using Color = Blazorise.Color
@using EventsManager.Shared.Requests
@using EventsManager.Shared.Responses
@using System.Net
@using EventsManager.Shared.Enums

@inject HttpClient Http
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationState
@inject IJSRuntime Js

@if (Tournament != null)
{
    <Modal @ref="_modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Edit the tournament</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Name</FieldLabel>
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <TextEdit @bind-Text="@Tournament.Name" Placeholder="Enter tournament name...">
                        <Feedback>
                            <ValidationNone>Please enter the name.</ValidationNone>
                            <ValidationSuccess>Name is good.</ValidationSuccess>
                            <ValidationError>Enter valid name!</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Validation>
            </Field>
            <div id="quill-editor" @ref="editorContainer" style="height: 400px;"></div>

            @*<Field>
                <FieldLabel>Description</FieldLabel>
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <TextEdit @bind-Text="@Tournament.Description" Placeholder="Enter tournament description...">
                        <Feedback>
                            <ValidationNone>Please enter the name.</ValidationNone>
                            <ValidationSuccess>Description is good.</ValidationSuccess>
                            <ValidationError>Enter valid name!</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Validation>
            </Field>*@
            <Field>
                <FieldLabel>Start date and time</FieldLabel>
                <DateEdit TValue="DateTime" @bind-Date="@Tournament.StartDate" InputMode="DateInputMode.DateTime"/>
            </Field>
            <Field>
                <FieldLabel>Location</FieldLabel>
                <Select @bind-SelectedValue="@Tournament.Location" TValue="MatchLocation">
                    <SelectItem Value="MatchLocation.PadelBaseSalzburg">Padel Base Salzburg</SelectItem>
                    <SelectItem Value="MatchLocation.PuntoDeOroClub">Punto de Oro Club</SelectItem>
                    <SelectItem Value="MatchLocation.None">-</SelectItem>
                </Select>
            </Field>
            <Field>
                <FieldLabel>Max teams</FieldLabel>
                <Select @bind-SelectedValue="@Tournament.MaxTeams" TValue="int">
                    <SelectItem Value="8">8</SelectItem>
                    <SelectItem Value="12">12</SelectItem>
                    <SelectItem Value="16">16</SelectItem>
                </Select>
            </Field>
            <Field>
                <FieldLabel>Round robin phase groups</FieldLabel>
                <Select @bind-SelectedValue="@Tournament.RoundRobinPhaseGroups" TValue="int">
                    <SelectItem Value="1">1</SelectItem>
                    <SelectItem Value="2">2</SelectItem>
                    <SelectItem Value="3">3</SelectItem>
                    <SelectItem Value="4">4</SelectItem>
                </Select>
            </Field>
            <Field>
                <FieldLabel>Competition style</FieldLabel>
                <Select @bind-SelectedValue="@Tournament.CompetitionStyle" TValue="CompetitionStyle">
                    <SelectItem Value="CompetitionStyle.RoundRobinPhaseOnly">Only Round Robin Phase</SelectItem>
                    <SelectItem Value="CompetitionStyle.RoundRobinPhaseAndFinals">Round Robin Phase and Finals</SelectItem>
                </Select>
            </Field>
            <Field>
                <FieldLabel>Round robin type</FieldLabel>
                <Select @bind-SelectedValue="@Tournament.RoundRobinType" TValue="RoundRobinType">
                    <SelectItem Value="RoundRobinType.Random">Random groups</SelectItem>
                    <SelectItem Value="RoundRobinType.BestPlayersLeadGroups">Best players lead groups</SelectItem>
                </Select>
            </Field>
            <div class="form-group">
                <Switch @bind-Checked="@Tournament.RegistrationsOpen" TValue="bool">Open registrations</Switch>
            </div>
            <div class="form-group">
                <Switch @bind-Checked="@Tournament.ShowBrackets" TValue="bool">Show brackets</Switch>
            </div>
            <div class="form-group">
                <Switch @bind-Checked="@_isFree" TValue="bool">Is free</Switch>
            </div>
            @if (!_isFree)
            {
                <div class="form-group">
                    <label>Price</label>
                    <NumericPicker @bind-Value="@Tournament.Price" WheelOn="NumericWheelOn.Hover"/>
                </div>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            <Button Color="Color.Success" Clicked="@CreateTournament">Edit</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
}

@code {
    [Parameter]
    public bool Show { get; set; }
    
    [Parameter] 
    public EventCallback DontShow { get; set; }
    
    [Parameter]
    public TournamentDetailResponse? Tournament { get; set; }
    
    private ElementReference editorContainer;

    private bool _isFree = true;

    protected override void OnInitialized()
    {
        if (Tournament?.Price != 0)
        {
            _isFree = false;
        }
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) 
        {
            if (Tournament != null)
            {
                await Js.InvokeVoidAsync("initializeQuill", "quill-editor");
                if (!string.IsNullOrEmpty(Tournament.Description))
                {
                    await Js.InvokeVoidAsync("setQuillContent", Tournament.Description);
                }
            }
        }
    }

    private async Task<string> GetQuillContent()
    {
        return await Js.InvokeAsync<string>("getQuillContent");
    }


    protected override async Task OnParametersSetAsync()
    {
        if (Show)
        {
            await ShowModal();
        }
        else
        {
            await HideModal();
        }
    }
    
    private async Task CreateTournament()
    {
        Tournament.Description = await GetQuillContent();
        var tournamentRequest = new TournamentRequest
        {
            Name = Tournament.Name,
            Description = Tournament.Description,
            OpenRegistrations = Tournament.RegistrationsOpen,
            StartDate = Tournament.StartDate,
            Location = Tournament.Location,
            MaxTeams = Tournament.MaxTeams == 8 ? MaxTeams.Eight : MaxTeams.Sixteen,
            Price = _isFree ? 0 : Tournament.Price,
            ShowBrackets = Tournament.ShowBrackets,
            RoundRobinPhaseGroups = Tournament.RoundRobinPhaseGroups,
            RoundRobinType = Tournament.RoundRobinType,
            CompetitionStyle = Tournament.CompetitionStyle
        };
        
        try
        {
            var response = await Http.PutAsJsonAsync($"tournament/{Tournament.Id}", tournamentRequest);

            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Tournament successfully updated.");
                await DontShow.InvokeAsync();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
        catch (Exception)
        {
            ToastService.ShowError("Something went wrong. Please try again later.");
        }
        finally
        {
            
        }
    }
    
    private Modal _modalRef = new();

    private Task ShowModal()
    {
        return _modalRef.Show();
    }

    private Task HideModal()
    {
        return _modalRef.Hide();
    }
}
