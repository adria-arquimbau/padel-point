@using Color = Blazorise.Color
@using EventsManager.Shared.Requests
@using EventsManager.Shared.Responses
@using System.Net
@using EventsManager.Shared.Enums

@inject HttpClient Http
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationState


@if (Tournament != null)
{
    <Modal @ref="_modalRef">
        <ModalContent Centered>
            <ModalHeader>
                <ModalTitle Size="HeadingSize.Is5">Sign in to: @Tournament.Name</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Search your couple</FieldLabel>
                    <input type="text" class="form-control" placeholder="Search..." @oninput="OnSearch" />
                    <div class="search-players-list">
                        @foreach (var player in _searchedPlayers)
                        {
                            <div class="searched-player">
                                <div>
                                    @player.NickName (@player.Elo)
                                </div>
                                <div>
                                    @if(!_invitingPlayer)
                                    {
                                        <Button Size="Size.Small" Color="Color.Success" Clicked="() => InvitePlayer(player.Id, player.NickName)" Outline>Invite</Button>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Color="Color.Success" >Sign In</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}

@code {
    [Parameter]
    public bool Show { get; set; }
    
    [Parameter] 
    public EventCallback DontShow { get; set; }
    
    [Parameter]
    public TournamentDetailResponse? Tournament { get; set; }
    private bool _invitingPlayer = false;
    private List<PlayerToInviteResponse> _searchedPlayers = new();

    protected override async Task OnParametersSetAsync()
    {
        if (Show)
        {
            await ShowModal();
        }
        else
        {
            await HideModal();
        }
    }
    
    private async Task OnSearch(ChangeEventArgs e)
    {
        var value = e.Value?.ToString()?.ToLower();
        if (value == null || value.Length < 3)
        {
            return;
        }
        
        try
        {
            var response = await Http.GetAsync($"tournament/{Tournament.Id}/search-invite?term={value}");
            if (response.IsSuccessStatusCode)
            {
                _searchedPlayers = await response.Content.ReadFromJsonAsync<List<PlayerToInviteResponse>>();
            }
        }
        catch (Exception)
        {
            ToastService.ShowError("Something went wrong, please try again later.");
        }
        
        StateHasChanged();
    }
    
    private async Task InvitePlayer(Guid playerId, string nickName)
    {
       
        _invitingPlayer = true;
        try
        {
            // var response = await Http.PostAsync($"match/{Match.Id}/invite/{playerId}/team/{selectedTeam}", null);
            //
            // if(response.IsSuccessStatusCode)
            // {
            //     await searchPlayerModalRef.Hide();
            //     ToastService.ShowInfo($"{nickName} has been invited to the match.");
            //     await RefreshMatch.InvokeAsync();
            // }
            // else
            // {
            //     var error = await response.Content.ReadAsStringAsync();
            //     ToastService.ShowError(error);
            // }
            
        }
        catch (Exception)
        {
            ToastService.ShowError("Something went wrong, please try again later.");
        }
        finally
        {
            _invitingPlayer = false;
        }
    }
    
    private Modal _modalRef = new();

    private Task ShowModal()
    {
        return _modalRef.Show();
    }

    private Task HideModal()
    {
        return _modalRef.Hide();
    }
}

<style>
    .search-players-list{
            margin: 5px;
        }
        
        .searched-player{
            display: flex;
            flex-direction: row;
            justify-content: space-around;
            margin-bottom: 5px;
        }
</style>
