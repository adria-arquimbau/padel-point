@using EventsManager.Shared.Responses
@using EventsManager.Shared.Dtos
@using Color = Blazorise.Color

@inject NavigationManager NavigationManager

@if (Couple != null)
{
    <div class="couple-card">
        <div class="couple-avatar">
            <img @onclick="() => NavigateToPlayerDetail(Couple.Player1)" src="@GetPlayerAvatarSource(Couple.Player1)" alt="Player avatar" class="couple-avatar-img" style="@GetStyleNonConfirmedPlayer(Couple.Player1.IsConfirmed)"/>
            <img @onclick="() => NavigateToPlayerDetail(Couple.Player2)" src="@GetPlayerAvatarSource(Couple.Player2)" alt="Player avatar" class="couple-avatar-img second-image" style="@GetStyleNonConfirmedPlayer(Couple.Player2.IsConfirmed)"/>
        </div>
        <div class="player-info">
            <div class="player-info-header">
                <div class="player-info-name">
                    @Couple.Player1.NickName
                </div>
                <div class="player-info-flag">
                    <CountryFlag Size="FlagSize.Small" IsRounded="true" Country="@_player1Country"></CountryFlag>
                </div>
                <div class="player-info-name">
                    @Couple.Player2.NickName
                </div>
                <div class="player-info-flag">
                    <CountryFlag Size="FlagSize.Small" IsRounded="true" Country="@_player2Country"></CountryFlag>
                </div>
            </div>
            <div class="player-info-content">
                <div class="info-box">
                    <div class="info-label">Elo</div>
                    <div>@Couple.Player1.Elo / @Couple.Player2.Elo</div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public CoupleResponse? Couple { get; set; }
    
    private Country _player1Country;
    private Country _player2Country;
    
    protected override Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(Couple?.Player1.Country))
        {
            if (Enum.TryParse(typeof(Country), Couple.Player1.Country, out var parsedCountry))
            {
                _player1Country = (Country)parsedCountry;
            }
        }
        if (!string.IsNullOrWhiteSpace(Couple?.Player2.Country))
        {
            if (Enum.TryParse(typeof(Country), Couple.Player2.Country, out var parsedCountry))
            {
                _player2Country = (Country)parsedCountry;
            }
        }
        
        return base.OnInitializedAsync();
    }
    
    private string GetPlayerAvatarSource(PlayerDetailResponse player)
    {
        return player.ImageUrl?.ToString() ?? "/default-avatar.png";
    }
    
    private string GetStyleNonConfirmedPlayer(bool playerIsConfirmed)
    {
        if (!playerIsConfirmed)
        {
            return "border: 2px solid red;";
        }
        return "";
    }
    
    private void NavigateToPlayerDetail(PlayerDetailResponse player)
    {
        NavigationManager.NavigateTo($"/player-detail/{player.Id}");
    }
}

<style>  
    .couple-card {
        border-radius: 8px;
        background-color: white;
        max-width: 641px;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 5px;
        padding: 5px 15px;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
    }
    
    .couple-avatar{
        display: flex;
        justify-content: start;
    }
    
    .second-image {
        position: relative;
        left: -20px;
    }
    
    .couple-avatar-img{
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 50%;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.7);
    }
    
    .player-info {
        display: flex;
        flex-direction: column;
    }
    
    .player-info-name {
        font-size: 14px;
    }
    
    .player-info-header {
        display: flex;
        flex-direction: row;
        justify-content: space-around;
        align-items: center;
    }
    
    .player-info-content {
        display: flex;
        justify-content: flex-end;
        font-size: 13px;
    }
    
    .info-box {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 0px 12px 5px 12px;
    }
    
    .info-label {
        font-size: 10px;
        color: grey;
    }
    
    .player-info-flag{
        margin: 0px 5px 0px 5px; 
    }
</style>