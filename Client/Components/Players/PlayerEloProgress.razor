@using EventsManager.Shared.Responses
@using Color = Blazorise.Color

@inject HttpClient Http
@inject IToastService ToastService

@if (_eloHistory == null)
{
    <LoadingSpinner></LoadingSpinner>
}
else
{
    <div class="elo-chart">
        <LineChart @ref="@_lineChart" TItem="double" />
        <Button class="show-elo-button" Size="Size.Small" Color="Color.Primary" Clicked="@(async () => await HandleRedraw())">Show your elo history</Button>
    </div>
}

@code {
    private List<EloHistoryResponse>? _eloHistory;

    protected override async Task OnInitializedAsync()
    {
        await Get();

    }

    private async Task Get()
    {
        try
        {
            var response = await Http.GetAsync("elohistory");

            if (response.IsSuccessStatusCode)
            {
                _eloHistory = await response.Content.ReadFromJsonAsync<List<EloHistoryResponse>>();
                
                // Add StateHasChanged after data fetch
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
        catch (Exception)
        {
            ToastService.ShowError("Something went wrong, please try again later.");
        }
    }

    LineChart<double> _lineChart = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender && _eloHistory != null)
        {
            await HandleRedraw();
        }
    }

    private async Task HandleRedraw()
    {
        if (_eloHistory != null)
        {
            await _lineChart.Clear();
            await _lineChart.AddLabelsDatasetsAndUpdate(_eloHistory.Select(e => e.ChangeDate.ToShortDateString()).ToList(), GetLineChartDataset());
        }
    }

    private LineChartDataset<double> GetLineChartDataset()
    {
        return new LineChartDataset<double>
        {
            Label = "Your elo history",
            Data = _eloHistory?.Select(e => (double)e.Elo).ToList(),
            BackgroundColor = _backgroundColors,
            BorderColor = _borderColors,
            Fill = true,
            PointRadius = 3,
            CubicInterpolationMode = "monotone",
        };
    }

    // You can choose a specific color for your data
    List<string> _backgroundColors = new() { ChartColor.FromRgba( 255, 99, 132, 0.2f ) };
    List<string> _borderColors = new() { ChartColor.FromRgba( 255, 99, 132, 1f ) };
}

<style>
    .elo-chart{
        margin: 10px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
</style>
