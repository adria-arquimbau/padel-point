@using EventsManager.Shared.Responses
@using Color = Blazorise.Color

@inject HttpClient Http
@inject IToastService ToastService

@if (_loading == null)
{
    <LoadingSpinner></LoadingSpinner>
}
else
{
    if (OtherPlayerEloHistory == null)
    {
        <div class="elo-chart">
            <LineChart @ref="@_lineChart" TItem="double" />
        </div>
    }
    if (OtherPlayerEloHistory != null)
    {
        <div class="elo-chart">
            <LineChart @ref="@_lineChart" TItem="double" />
        </div>
    }
}

@code {
    private bool _loading = false;
    
    [Parameter]
    public List<EloHistoryResponse>? OtherPlayerEloHistory { get; set; }
    
    private List<EloHistoryResponse>? _eloHistory;
    
    LineChart<double> _lineChart = new();
    List<string> _backgroundColors = new() { ChartColor.FromRgba( 255, 99, 132, 0.2f ) };
    List<string> _borderColors = new() { ChartColor.FromRgba( 255, 99, 132, 1f ) };
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Get();
        if (firstRender && _eloHistory != null)
        {
            await HandleRedraw();
            StateHasChanged();
        }
    }

    private async Task Get()
    {
        _loading = true;
        try
        {
            var response = await Http.GetAsync("elohistory");

            if (response.IsSuccessStatusCode)
            {
                _eloHistory = await response.Content.ReadFromJsonAsync<List<EloHistoryResponse>>();
                
                // Add StateHasChanged after data fetch
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
                _loading = false;
            }
        }
        catch (Exception)
        {
            _loading = false;
            ToastService.ShowError("Something went wrong, please try again later.");
        }
    }
    
    private async Task HandleRedraw()
    {
        if (_eloHistory != null)
        {
            await _lineChart.Clear();
            await _lineChart.AddLabelsDatasetsAndUpdate(_eloHistory.Select(e => e.ChangeDate.ToShortDateString()).ToList(), GetLineChartDataset());
        }
    }

    private LineChartDataset<double> GetLineChartDataset()
    {
        return new LineChartDataset<double>
        {
            Label = "Your elo history",
            Data = _eloHistory?.Select(e => (double)e.Elo).ToList(),
            BackgroundColor = _backgroundColors,
            BorderColor = _borderColors,
            Fill = true,
            PointRadius = 3,
            CubicInterpolationMode = "monotone",
        };
    }
}

<style>
    .elo-chart{
        margin: 10px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
</style>
