@using EventsManager.Shared.Responses
@using EventsManager.Client.Components.Match
@using Color = Blazorise.Color

@if (!Tournament.ShowBrackets)
{
    <Alert Style="margin-top: 10px" Color="Color.Info" Visible>
        <AlertMessage>Competition view disabled</AlertMessage>
        <AlertDescription>Right now the competition view is disabled by an admin, will be enabled soon.</AlertDescription>
    </Alert>
}
else
{
    <div>
        <h3>Round Robin Phase</h3>
        @if (Tournament.RoundRobinPhaseGroups > 0 && Tournament.RoundRobinPhaseMatches.Any())
        {
            @for (int groupNumber = 1; groupNumber <= Tournament.RoundRobinPhaseGroups; groupNumber++)
            {
                var groupMatches = Tournament.RoundRobinPhaseMatches
                    .Where(x => x.RoundRobinPhaseGroup == groupNumber)
                    .GroupBy(x => x.RoundRobinPhaseRound)
                    .OrderBy(group => group.Key);

                if (groupMatches.Any())
                {
                    <h4>Group @groupNumber</h4>
                    @foreach (var roundGroup in groupMatches)
                    {
                        <h5>Round @roundGroup.Key</h5>
                        @foreach (var match in roundGroup)
                        {
                            <TournamentMatch Match="@match"></TournamentMatch>
                        }
                    }
                }
            }
        }
    </div>
}

@code {
    [Parameter]
    public TournamentDetailResponse? Tournament { get; set; }
}