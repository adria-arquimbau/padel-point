@using EventsManager.Shared.Responses
@using EventsManager.Client.Components.Match
@using Color = Blazorise.Color

@inject IMessageService MessageService
@inject IToastService ToastService
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (!Tournament.ShowBrackets)
{
    <Alert Style="margin-top: 10px" Color="Color.Info" Visible>
        <AlertMessage>Competition view disabled</AlertMessage>
        <AlertDescription>Right now the competition view is disabled by an admin, will be enabled soon.</AlertDescription>
    </Alert>
}
else
{
    @if (Tournament.RoundRobinPhaseGroups > 0 && RoundRobinPhaseMatches.Any())
    {
        <div class="round-robin">
            <h3 class="round-robin-title">Round Robin Phase</h3>
            @if(Tournament.RoundRobinPhaseGroups > 1)
            {
                <p>There are @Tournament.RoundRobinPhaseGroups groups with @RoundRobinPhaseMatches.Count() matches in this phase.</p>
            }
            else
            {
                <p>There is @Tournament.RoundRobinPhaseGroups group with @RoundRobinPhaseMatches.Count() matches in this phase.</p>
            }
            @if (!Tournament.RoundRobinPhaseMatches.Any(x => x.IsFinished))
            {
                <Alert Color="Color.Info" Visible>
                    Phase in progress... Confirm all matches when added the result to each one.
                </Alert>
            }
            else
            {
                <Alert Color="Color.Success" Visible>
                    Phase finished!
                </Alert>
            }
             @if (Tournament.RoundRobinPhaseMatches
                .All(x => x.Sets.Any()))
            {
                <Button Color="Color.Success" Clicked="ConfirmAllMatches">Confirm all matches</Button>
            }
            
            <div class="group-header-container">
                @for (var groupNumber = 1; groupNumber <= Tournament.RoundRobinPhaseGroups; groupNumber++)
                {
                    var groupMatches = RoundRobinPhaseMatches
                        .Where(x => x.RoundRobinPhaseGroup == groupNumber)
                        .GroupBy(x => x.RoundRobinPhaseRound)
                        .OrderBy(group => group.Key);

                    if (groupMatches.Any())
                    {
                        <div class="group">
                            <h4 class="group-title">Group @groupNumber</h4>
                            
                            @foreach (var roundGroup in groupMatches)
                            {
                                <div class="round">
                                    <h5 style="text-align: left;">Round @roundGroup.Key</h5>
                                    <div class="round-matches">
                                        @foreach (var match in roundGroup)
                                        {
                                            <TournamentMatch RefreshMatch="RefreshMatchCallback" Match="@match"></TournamentMatch>
                                        }
                                    </div>
                                </div>
                            }
                            <Divider />
                        </div>
                        
                    }
                }
            </div>
        </div>
    }
}



@code {
    private bool _loading;

    private List<RoundRobinMatchResponse> RoundRobinPhaseMatches = new();
    
    [Parameter] 
    public TournamentDetailResponse? Tournament { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await GetRoundRobinPhase();
    }
    
    private async Task GetRoundRobinPhase()
    {
        try
        {
            _loading = true;
            HttpResponseMessage? response;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == false)
            {
                var http = HttpClientFactory.CreateClient("PadelPoint.ServerAPI.Anonymous");
                response = await http.GetAsync($"tournament/{Tournament.Id}/round-robin-phase");
            }
            else
            {
                response = await Http.GetAsync($"tournament/{Tournament.Id}/round-robin-phase");
            }

            if (response.IsSuccessStatusCode)
            {
                RoundRobinPhaseMatches = await response.Content.ReadFromJsonAsync<List<RoundRobinMatchResponse>>();
                StateHasChanged();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
        catch (Exception)
        {
            ToastService.ShowError("Something went wrong, please try again later.");
        }
        finally
        {
            _loading = false;
        }
        
    }
    
    public async Task RefreshMatchCallback()
    {
        await GetRoundRobinPhase();
    }

    private async Task ConfirmAllMatches()
    {
        if (await MessageService.Confirm("Are you sure you want to confirm all matches result?", "Confirm match results"))
        {
            _loading = true;
        
            try
            {
                var response = await Http.PostAsync($"tournament/{Tournament.Id}/confirm-round-robin-phase-matches", null);
                if (response.IsSuccessStatusCode)
                {
                    ToastService.ShowInfo($"All round robin phase matches confirmed.");
                    _loading = false;
                    await GetRoundRobinPhase();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(error);
                }
            }
            catch (Exception)
            {
                ToastService.ShowError("Something went wrong, please try again later.");
            }
        
            _loading = false;   
        }
    }   

    private bool CanIConfirmAllMatches()
    {
        var allMatchesHaveASet = RoundRobinPhaseMatches
            .All(x => x.Sets.Any());
        
        return !allMatchesHaveASet;
    }

}

<style>
    .round-robin {
        margin-top: 10px;
        margin-bottom: 10px;
        display: flex;
        flex-direction: column;
        align-items: center; /* Center content horizontally */
        text-align: center; /* Center text horizontally */
    }

    .round-robin-title {
        margin-bottom: 10px;
    }

    .group-header-container {
        display: flex;
        flex-direction: column;
        align-items: center; /* Center content horizontally */
        text-align: center; /* Center text horizontally */
    }

    .group-title {
        margin-bottom: 5px; /* Add some space below the group title */
    }

    .round {
        margin-bottom: 10px;
    }
    
    .round-matches {
        display: flex;
        justify-content: center;
         flex-wrap: wrap;
    }
</style>
