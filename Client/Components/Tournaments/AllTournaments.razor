@using EventsManager.Shared.Responses
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationState

@if (_loading)
{
    for (var i = 0; i < 5; i++)
    {
        <AllMatchesSkeleton />
    }
}
@if (!_loading && !_tournaments.Any())
{
    <p>No tournaments found.</p>
}
@if (!_loading && _tournaments.Any())
{
    @foreach (var tournament in _tournaments)
    {
        <div class="tournament-card" @onclick="() => GoToTheTournament(tournament.Id)">
            <div class="date-time-location">
                <span>@tournament.StartDate.ToLongDateString()</span> 
                <span>@tournament.StartDate.ToShortTimeString()</span>
                <span>@tournament.Location</span>
            </div>
            <Divider></Divider>
            <img src="https://padelpointsblob.blob.core.windows.net/tournament-images/Screenshot%202023-08-24%20at%2012.52.33.png" alt="header"/>
            <div class="main-tournament-info">
                <div class="tournament-title">
                    <p>@tournament.Name</p>
                </div>
                  <div class="tournament-specs">
                      <div class="tournament-specs-box">
                          <div class="tournament-specs-content">
                              Couples
                          </div>
                          <div class="tournament-specs-content grey-typo">
                              @tournament.TeamsCount / @tournament.MaxTeams
                          </div>
                      </div>
                      <div class="tournament-specs-box">
                          <div class="tournament-specs-content">
                              Price
                          </div>
                          <div class="tournament-specs-content grey-typo">
                              @GetPrice(tournament.Price)
                          </div>
                      </div>
                  </div>

                <div class="registration-status">
                    @if (tournament.RegistrationsOpen)
                    {
                        <p class="open-registrations">Open registrations</p>
                    }
                    else
                    {
                        <p class="closed-registrations">Closed registrations</p>
                    }
                </div>
            </div>
        </div>
    }
}

@code {
    private List<TournamentResponse> _tournaments = new();
    private bool _loading = false;

    protected override async Task OnInitializedAsync()
    {
        await GetAllTournaments();
    }

    private async Task GetAllTournaments()
    {
        _loading = true;
        try
        {
            HttpResponseMessage? response;
            var authState = await AuthenticationState.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                response = await Http.GetAsync("tournament");
            }
            else
            {
                var http = HttpClientFactory.CreateClient("PadelPoint.ServerAPI.Anonymous");
                response = await http.GetAsync("tournament");
            }

            if (response.IsSuccessStatusCode)
            {
                _tournaments = await response.Content.ReadFromJsonAsync<List<TournamentResponse>>();
                StateHasChanged(); 
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
        catch (Exception)
        {
            ToastService.ShowError("Something went wrong. Please try again later.");
        }
        finally
        {
            _loading = false;
        }
    }

    private void GoToTheTournament(Guid tournamentId)
    {
        NavigationManager.NavigateTo($"tournament/{tournamentId}/detail");
    }

    private object GetPrice(decimal tournamentPrice)
    {
        return tournamentPrice == 0 ? "Free" : $"{tournamentPrice} €";
    }

}

<style>
    .tournament-card {
        border-radius: 10px;
        padding: 15px;
        background-color: #f7f9fc;
        margin-bottom: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s, box-shadow 0.2s;
        max-width: 650px;
    }

    .tournament-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
    }

    .date-time-location {
        font-size: 10px;
        text-align: center;
        color: #888;
        display: flex;
        justify-content: space-between;
        margin-bottom: 8px;
    }

    .main-tournament-info {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .tournament-title p {
        font-size: 18px;
        font-weight: 600;
    }
    
    .grey-typo
    {
        color: grey;
    }
    
    .tournament-specs-content{
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    
    .tournament-specs{
        display: flex;
        flex-direction: row;
        justify-content: space-around;
    }
    
    .tournament-specs-box {
        min-width: 120px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    
    .registration-status{
        margin-top: 10px;
    }

    .open-registrations {
        color: white;
        background-color: #4CAF50;
        font-weight: bold;
        padding: 2px 10px;
        border-radius: 20px;
        border: 2px solid rgba(255, 255, 255, 0.8);
        display: inline-block;
    }
    
    .closed-registrations {
        color: white;
        background-color: #F44336;
        font-weight: bold;
        padding: 2px 10px;
        border-radius: 20px;
        border: 2px solid rgba(255, 255, 255, 0.8);
        display: inline-block;
    }
    
    .tournament-card img {
        width: 100%;  /* Takes up the full width of the parent container */
        height: auto; /* Auto height ensures the aspect ratio is maintained */
        object-fit: cover; /* Ensures the image covers the container without being stretched */
        display: block; /* Eliminates any potential space below the image */
        max-height: 200px;  /* Set a maximum height if needed */
        border-radius: 8px; /* Optional, if you want rounded corners for the image */
    }

</style>