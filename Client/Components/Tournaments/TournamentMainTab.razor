@using EventsManager.Shared.Responses
@using EventsManager.Client.Components.Players
@using Color = Blazorise.Color

@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMessageService MessageService

<div class="tournament-card-header">
    <div class="tournament-card-title">
        <img src=@Tournament.ImageUri alt="header"/>
        <h3>@Tournament.Name</h3>
    </div>
    @if (!Tournament.RegistrationsOpen)
    {
        <Alert Color="Color.Warning" Visible>
            <AlertMessage>Currently the inscriptions are closed.</AlertMessage>
        </Alert>
    }
</div>

<div class="tournament-card">
    <Tabs  FullWidth="true" SelectedTab="@_selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
        <Items>
            <Tab Name="info">Info</Tab>
            <Tab Name="teams">Teams</Tab>
            <Tab Name="roundRobin">Round Robin</Tab>
            <Tab Name="finals">Finals</Tab>
            <Tab Name="positions">Positions</Tab>
            @if (Tournament.IsPlayerTheCreator)
            {
                <Tab Name="admin">Admin</Tab>
            }
        </Items>
        <Content>
            <TabPanel Name="info">
                <div class="tournament-card-description">
                    @RenderHtml(Tournament.Description  )
                </div>
            </TabPanel>
            <TabPanel Name="teams">
                <Alert Color="Color.Warning">
                    <AlertMessage></AlertMessage>
                </Alert>
                @if (!Tournament.Couples.Any())
                {
                    <p>No teams registered yet.</p>
                }
                else
                {
                    @foreach (var couple in Tournament.Couples)
                    {
                        <TeamPlayerCard Couple="couple"></TeamPlayerCard>
                        @if (Tournament.IsPlayerTheCreator)
                        {
                            <div>
                                <Button Clicked="() => DeleteTeam(couple.Id)" Color="Color.Danger" Size="Size.ExtraSmall">Delete Team</Button>
                            </div>
                        }
                    }
                }
            </TabPanel>
            <TabPanel Name="roundRobin">
                <TournamentCompetition Tournament="@Tournament"></TournamentCompetition>
            </TabPanel>
            <TabPanel Name="finals">
                <TournamentFinals RefreshMatch="Refresh" Tournament="@Tournament"></TournamentFinals>
            </TabPanel>
            <TabPanel Name="positions">
                <TournamentPositions Tournament="Tournament"></TournamentPositions>
            </TabPanel>
            @if (Tournament.IsPlayerTheCreator)
            {
                <TabPanel Name="admin">
                    <TournamentAdmin RefreshTournament="Refresh" Tournament="@Tournament"></TournamentAdmin>
                </TabPanel>
            }
        </Content>
    </Tabs>
</div>

@code {
    [Parameter]
    public TournamentDetailResponse? Tournament { get; set; }
    
    [Parameter]
    public EventCallback<string> OnChangeTab { get; set; }
    
    [Parameter]
    public EventCallback RefreshTournament { get; set; }
        
    private string _selectedTab = "info";
    private bool _loading = false;

    private async Task OnSelectedTabChanged(string name)
    {
        _selectedTab = name;

        if (_selectedTab == "info")
        {
            await OnChangeTab.InvokeAsync("info");
        }
        if (_selectedTab == "admin")
        {
            await OnChangeTab.InvokeAsync("admin");
        }
    }
    
    public void Refresh()
    {
        RefreshTournament.InvokeAsync();
    }
    
    RenderFragment RenderHtml(string rawHtml)
    {
        return builder =>
        {
            builder.AddContent(0, new MarkupString(rawHtml));
        };
    }

    
    private async Task DeleteTeam(Guid coupleId)
    {
        _loading = true;
        if (await MessageService.Confirm( "Are you sure you want to delete this couple?", "Delete couple"))
        {
            try
            {
                var response = await Http.DeleteAsync($"tournament/{Tournament.Id}/couple/{coupleId}");

                if (response.IsSuccessStatusCode)
                {
                    await RefreshTournament.InvokeAsync();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    ToastService.ShowError(error);
                }
            }
            catch (Exception)
            {
                ToastService.ShowError("Something went wrong, please try again later.");
            }
            finally
            {
                _loading = false;
            }
        }
    }
}   

<style>
    .tournament-card{
            max-width: 800px;
            padding: 12px;
            display: flex;  
            flex-direction: column;
            background-color: white;
            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
    }
    .tournament-card-header{
            max-width: 800px;
            padding: 12px;
            display: flex;  
            margin-bottom: 10px;
            flex-direction: column;
            background-color: white;
            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
    }
        
    .tournament-card-title{
        font-size: 14px;
    }
           
        
    .tournament-card-description{
        margin-top: 10px;
        font-size: 15px;
    }
    
    .tournament-card-header img {
        width: 100%;  /* Takes up the full width of the parent container */
        height: auto; /* Auto height ensures the aspect ratio is maintained */
        object-fit: cover; /* Ensures the image covers the container without being stretched */
        display: block; /* Eliminates any potential space below the image */
        max-height: 250px;  /* Set a maximum height if needed */
    }

    .tournament-card-header {
        display: flex;  /* Converts the container to a flex container */
        align-items: center;  /* Centrally aligns the flex children vertically */
        flex-direction: column;  /* Stacks the flex children vertically */
    }
    
    .tournament-card-title h3 {
        margin-top: 10px;  /* Adds space between the image and the title */
    }

</style>