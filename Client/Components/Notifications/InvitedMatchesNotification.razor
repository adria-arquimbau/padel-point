@using EventsManager.Shared.Responses
@using Color = Blazorise.Color

@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IMessageService MessageService


@if (!_loading)
{
    @if (_invitedMatches.Any())
    {
        <Divider></Divider>
        @foreach (var invitedMatch in _invitedMatches)
        {
            <div class="invited-matches">
                <div>
                    @invitedMatch.CreatorNickname Invited you to a match
                </div>
                <Button Size="Size.Small" style="margin-top: 5px" Color="Color.Dark" Clicked="() => GoToMatch(invitedMatch.MatchId)">Go to match</Button>
                <div class="accept-decline-buttons">
                    <Button Size="Size.Small" style="margin-top: 5px" Color="Color.Success" Clicked="() => RespondInvitation(invitedMatch.MatchId, true)">Accept invitation</Button>
                    <Button Size="Size.Small" style="margin-top: 5px" Color="Color.Danger" Clicked="() => RespondInvitation(invitedMatch.MatchId, false)">Decline</Button>
                </div>
            </div>
        }
        <Divider></Divider>
    }
}

@code {
    private bool _loading = false;
    private List<InvitedMatchesResponse> _invitedMatches = new();

    protected override async Task OnInitializedAsync()
    {
        await GetInvitations();
    }

    private async Task GetInvitations()
    {
        _loading = true;

        try
        {
            var response = await Http.GetAsync($"Notification/invited-matches");

            if (response.IsSuccessStatusCode)
            {
                _invitedMatches = await response.Content.ReadFromJsonAsync<List<InvitedMatchesResponse>>();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
        catch (Exception)
        {
            ToastService.ShowError("Something went wrong, please try again later.");
        }
        finally
        {
            _loading = false;
        }
    }

    private void GoToMatch(Guid invitedMatchMatchId)
    {
        NavigationManager.NavigateTo($"match/{invitedMatchMatchId}/detail");
    }

    private async Task RespondInvitation(Guid invitedMatchMatchId, bool accept)
    {
        if (accept)
        {
            await CallInviteEndpoint(invitedMatchMatchId, accept);
        }
        else
        {
            if (await MessageService.Confirm( $"Are you sure want to decline the invitation?", $"Decline invitation"))
            {
                await CallInviteEndpoint(invitedMatchMatchId, accept);
            }
        }
    }

    private async Task CallInviteEndpoint(Guid invitedMatchMatchId, bool accept)
    {
        try
        {
            var response =
                await Http.PostAsync($"notification/accept-invitation/match/{invitedMatchMatchId}/accept/{accept}", null);

            if (response.IsSuccessStatusCode)
            {
                if (accept)
                {
                    NavigationManager.NavigateTo($"match/{invitedMatchMatchId}/detail");
                    ToastService.ShowSuccess("Invitation accepted");
                    return;
                }

                await GetInvitations();
                ToastService.ShowSuccess("Invitation declined");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError(error);
            }
        }
        catch (Exception)
        {
            ToastService.ShowError("Something went wrong, please try again later.");
        }
        finally
        {
            _loading = false;
        }
    }

}

<style>
    .invited-matches{
        display: flex;
        flex-direction: column;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
        position: relative;
        padding: 12px;
        border-radius: 10px;        
        background-color: white;
        margin-bottom: 5px;
        max-width: 641px;       
    }
    
    .accept-decline-buttons{
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }
    
    .accept-decline-buttons > Button {
        flex: 1; /* This makes each button take up an equal amount of space within the container */
        margin: 0 2px; /* This provides a little space between the buttons */
    }

</style>