@using System.Text
@using System.Text.Json
@using EventsManager.Shared.Dtos
@using EventsManager.Client.Components.ImageUploader
@using Microsoft.AspNetCore.Authorization
@using Color = Blazorise.Color

@inject HttpClient Http
@inject IToastService ToastService

@attribute [Authorize(Roles = "User")]

@if (_loading)
{
    <LoadingSpinner></LoadingSpinner>
}

<div class="border">
    <div class="image-container">
        @if (User?.ImageUrl != null)
        {
            <img class="user-image-picture rounded-circle mb-4" src="@($"{User.ImageUrl}?v={_imageUpdateCount}")" alt="User image"/>
        }
    </div>
    <ImageUploader Type="ImageUploader.ImageType.User" ImageUrl="@User?.ImageUrl" RefreshInformation="GetUserInformation" />
    <FluentDivider></FluentDivider>
    <form class="form">
        <div class="mb-3">
            <div class="country-container">
                <label class="form-label">Country</label>
                <CountryFlag HasShadow="true" IsRounded="true" Country="@_userCountry"></CountryFlag>
            </div>
            <Select @bind-SelectedValue="@_userCountry" TValue="Country">
                @foreach (var country in _countries)
                {
                    <SelectItem Value="@country">@country.GetDescription()</SelectItem>
                }
            </Select>
        </div>
        <div class="mb-3">
            <label class="form-label">Email</label>
            <input type="email" class="form-control" value="@User?.Email" readonly />
        </div>
        <div class="mb-3">
            <label class="form-label">User name</label>
            <input type="text" class="form-control" value="@User?.UserName" readonly />
        </div>
    </form>
    <Button Clicked="UpdateUserInformation" Color="Color.Primary" Size="Size.Small">Update</Button>
</div>


@code { 
    [Parameter]
    public UserDto? User { get; set; }

    private Country _userCountry;
    private bool ReadOnly { get; set; } = true;
    private int _imageUpdateCount = 0;
    private bool _loading;
    private List<Country> _countries = new();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(User?.Country))
        {
            if (Enum.TryParse(typeof(Country), User.Country, out var parsedCountry))
            {
                _userCountry = (Country)parsedCountry;
            }
        }
        _countries = GetCountries();
    }
    
    private async Task UpdateUserInformation()
    {
        _loading = true;
        try
        {
            User.Country = _userCountry.ToString();
            var response = await Http.PutAsJsonAsync("user", User);
        
            if(response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("User information updated successfully.");
            }
            else
            {
                ToastService.ShowError("Something went wrong. Please try again later.");
            }
        }
        catch (Exception)
        {
            ToastService.ShowError("Something went wrong. Please try again later.");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task GetUserInformation()
    {
        User = await Http.GetFromJsonAsync<UserDto>("User");
        _imageUpdateCount++;
    }
    
    private List<Country> GetCountries()
    {
        var countries = Enum.GetValues(typeof(Country)).Cast<Country>().ToList();
        countries.Add(Country.ES_CA);
        return countries;
    }
}

<style>
    .border {
        border: 1px solid #ccc;
        border-radius: 8px;
        background-color: white;    
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-around;
        margin-bottom: 15px;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
        padding: 10px;
    }
   
.country-container {
    display: flex;
    align-items: center;  /* This ensures vertical alignment */
}
   .user-image-picture {
            width: 150px;
           height: 150px;
           border-radius: 50%;
           object-fit: cover;
           display: block;
           margin: 15px;
           box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
    }
    
    .form-label {
        font-size: 18px;
        color: #333;
        font-weight: 400;
        margin-top: 10px;
    }
    
    .form-control {
        font-size: 16px;
        padding: 10px;
        border: none;
        border-bottom: 1px solid #ccc;
        width: 100%;
        margin-bottom: 20px;
    }
    
    .mb-3 {
        margin-bottom: 30px;
    }
</style>
